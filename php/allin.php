<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\abstract\allin as Exchange;

class allin extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'allin',
            'name' => 'allin',
            'countries' => array( 'US' ),
            'version' => 'v1',
            'userAgent' => null,
            'rateLimit' => 200,
            'hostname' => 'allin.com',
            'pro' => true,
            'certified' => false,
            'options' => array(
                'sandboxMode' => false,
            ),
            'has' => array(
                'CORS' => true,
                'spot' => true,
                'margin' => true,
                'swap' => true,
                'future' => true,
                'option' => true,
                'borrowCrossMargin' => true,
                'cancelAllOrders' => true,
                'cancelAllOrdersAfter' => true,
                'cancelOrder' => true,
                'cancelOrders' => true,
                'cancelOrdersForSymbols' => true,
                'closeAllPositions' => false,
                'closePosition' => false,
                'createMarketBuyOrderWithCost' => true,
                'createMarketSellOrderWithCost' => true,
                'createOrder' => true,
                'createOrders' => true,
                'createOrderWithTakeProfitAndStopLoss' => false,
                'createPostOnlyOrder' => false,
                'createReduceOnlyOrder' => false,
                'createStopLimitOrder' => false,
                'createStopLossOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'createTakeProfitOrder' => true,
                'createTrailingAmountOrder' => true,
                'createTriggerOrder' => false,
                'editOrder' => true,
                'fetchBalance' => true,
                'fetchBorrowInterest' => false, // temporarily disabled, doesn't work
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchCanceledAndClosedOrders' => true,
                'fetchCanceledOrders' => true,
                'fetchClosedOrder' => true,
                'fetchClosedOrders' => true,
                'fetchCrossBorrowRate' => true,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => false,
                'fetchDeposit' => false,
                'fetchDepositAddress' => true,
                'fetchDepositAddresses' => false,
                'fetchDepositAddressesByNetwork' => true,
                'fetchDeposits' => true,
                'fetchDepositWithdrawFee' => 'emulated',
                'fetchDepositWithdrawFees' => true,
                'fetchFundingHistory' => true,
                'fetchFundingRate' => true, // emulated in exchange
                'fetchFundingRateHistory' => true,
                'fetchFundingRates' => true,
                'fetchGreeks' => true,
                'fetchIndexOHLCV' => true,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchLedger' => true,
                'fetchLeverage' => true,
                'fetchLeverageTiers' => true,
                'fetchMarginAdjustmentHistory' => false,
                'fetchMarketLeverageTiers' => true,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => true,
                'fetchMyLiquidations' => true,
                'fetchMySettlementHistory' => true,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenInterest' => true,
                'fetchOpenInterestHistory' => true,
                'fetchOpenOrder' => true,
                'fetchOpenOrders' => true,
                'fetchOption' => true,
                'fetchOptionChain' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => true,
                'fetchOrderTrades' => false,
                'fetchPosition' => true,
                'fetchPositionHistory' => 'emulated',
                'fetchPositions' => true,
                'fetchPositionsHistory' => true,
                'fetchPremiumIndexOHLCV' => true,
                'fetchSettlementHistory' => true,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => true,
                'fetchTradingFees' => true,
                'fetchTransactions' => false,
                'fetchTransfers' => true,
                'fetchUnderlyingAssets' => false,
                'fetchVolatilityHistory' => true,
                'fetchWithdrawals' => true,
                'repayCrossMargin' => true,
                'sandbox' => true,
                'setLeverage' => true,
                'setMarginMode' => true,
                'setPositionMode' => true,
                'transfer' => true,
                'withdraw' => true,
            ),
            'timeframes' => array(
                '1m' => '1Min',
                '3m' => '3Min',
                '5m' => '5Min',
                '15m' => '15Min',
                '10m' => '10Min',
                '30m' => '30Min',
                '1h' => '1Hour',
                '2h' => '2Hour',
                '4h' => '4Hour',
                '6h' => '6Hour',
                '12h' => '12Hour',
                '1d' => '1Day',
                '1w' => '1Week',
            ),
            'urls' => array(
                'test' => array(
                    'spot' => 'https://api.allintest.pro',
                    'futures' => 'https://api.allintest.pro',
                    'public' => 'https://api.allintest.pro',
                    'private' => 'https://api.allintest.pro',
                ),
                'logo' => 'https://allinexchange.github.io/spot-docs/v1/en/images/logo-e47cee02.svg',
                'doc' => array( 'https://allinexchange.github.io/spot-docs/v1/en/#introduction' ),
                'api' => array(
                    'spot' => 'https://api.allintest.pro',
                    'futures' => 'https://api.allintest.pro',
                    'public' => 'https://api.allintest.pro',
                    'private' => 'https://api.allintest.pro',
                ),
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        '/open/v1/tickers/market' => 0,
                        '/open/v1/depth/market' => 0,
                        '/open/v1/trade/market' => 0,
                        '/open/v1/kline/market' => 0,
                    ),
                ),
                'private' => array(
                    'get' => array(
                        '/open/v1/tickers/exchange_info' => 1,
                        '/open/v1/tickers' => 1,
                        '/open/v1/balance' => 1,
                        '/open/v1/timestamp' => 1,
                        '/open/v1/kline' => 1,
                        '/open/v1/depth' => 1,
                        '/open/v1/tickers/trade' => 1,
                        '/open/v1/orders/last' => 1,
                        '/open/v1/orders' => 1,
                        '/open/v1/orders/detail' => 1,
                        '/open/v1/orders/detailmore' => 1,
                        '/open/v1/orders/fee-rate' => 1,
                    ),
                    'post' => array(
                        '/open/v1/orders/place' => 1,
                        '/open/v1/orders/cancel' => 1,
                        '/open/v1/orders/batcancel' => 1,
                    ),
                ),
            ),
            'exceptions' => array(
                'spot' => array(
                    'exact' => array(
                        '1010004' => '\\ccxt\\BadRequest',
                        '80005' => '\\ccxt\\BadRequest',
                    ),
                ),
                'exact' => array(
                    '1010037' => '\\ccxt\\OrderNotFound', // order not found
                    '1010312' => '\\ccxt\\BadRequest',
                    '1010313' => '\\ccxt\\AuthenticationError',
                    '1010314' => '\\ccxt\\RateLimitExceeded',   // Request cannot be more than %s/m
                    '1010315' => '\\ccxt\\RateLimitExceeded',   // no authority, ip is not allowed
                    '1010316' => '\\ccxt\\AuthenticationError', // no authority, sign is error
                    '1010007' => '\\ccxt\\RateLimitExceeded',   // call too frequently
                    '1010325' => '\\ccxt\\BadSymbol',           // symbol is empty
                    '10500' => '\\ccxt\\ExchangeError',         // system error
                    '1010367' => '\\ccxt\\OperationFailed',     // this ticker cannot be operated
                    '1010006' => '\\ccxt\\AuthenticationError', // invalid user_id
                    '1010009' => '\\ccxt\\BadRequest',          // side is error
                    '1010010' => '\\ccxt\\BadRequest',          // time is error
                    '1010008' => '\\ccxt\\BadRequest',          // status is error
                    '80005' => '\\ccxt\\BadRequest',            // param error
                    '1010013' => '\\ccxt\\BadRequest',          // ticker is paused
                    '1010018' => '\\ccxt\\BadRequest',          // cannot place market price order
                    '1010016' => '\\ccxt\\BadRequest',          // price is too small
                    '1010401' => '\\ccxt\\BadRequest',          // price is too high
                    '1010019' => '\\ccxt\\BadRequest',          // market price empty
                    '1010020' => '\\ccxt\\BadRequest',          // order_type must 1 or 3
                    '1010022' => '\\ccxt\\BadRequest',          // Below the minimum purchase price
                    '1010017' => '\\ccxt\\BadRequest',          // Order amount cannot be less than %s
                    '1010023' => '\\ccxt\\BadRequest',          // Below the minimum sell price
                    '1010318' => '\\ccxt\\BadRequest',          // client_oid must be 21 in length, and must be numbers
                    '1010030' => '\\ccxt\\OrderNotFound',       // order_id not exists
                    '1010002' => '\\ccxt\\BadRequest',          // ticker_id is empty
                    '1010004' => '\\ccxt\\BadRequest',          // kline type is error
                    '1010406' => '\\ccxt\\BadRequest',          // Depth position error
                    '1010005' => '\\ccxt\\BadRequest',          // data is empty
                    '1010364' => '\\ccxt\\BadRequest',          // symbol count cannot be more than 10
                ),
            ),
        ));
    }

    public function fetch_markets($params = array ()): array {
        /**
         * retrieves data on all $markets for allin
         * @see https://allinexchange.github.io/spot-docs/v1/en/#all-trading-pairs-2
         */
        // $markets_resp = { 'code' => 0,
        //     'msg' => 'ok',
        //     'data' => array( 'server_time' => 1720058066,
        //         'symbols' => array(
        //             array( 'symbol' => 'BTC-USDT',
        //                 'status' => 'TRADING',
        //                 'base_asset' => 'USDT',
        //                 'base_precision' => 2,
        //                 'base_asset_precision' => 8,
        //                 'quote_asset' => 'BTC',
        //                 'quote_precision' => 6,
        //                 'quote_asset_precision' => 8,
        //                 'order_types' => array( 'LIMIT', 'MARKET' ),
        //                 'order_side' => array( 'buy' => 1, 'sell' => -1 ),
        //                 'is_spot_trading_allowed' => true,
        //                 'min_order_amount' => '2' ),
        //             array( 'symbol' => 'ETH-USDT',
        //                 'status' => 'TRADING',
        //                 'base_asset' => 'USDT',
        //                 'base_precision' => 6,
        //                 'base_asset_precision' => 8,
        //                 'quote_asset' => 'ETH',
        //                 'quote_precision' => 6,
        //                 'quote_asset_precision' => 8,
        //                 'order_types' => array( 'LIMIT', 'MARKET' ),
        //                 'order_side' => array( 'buy' => 1, 'sell' => -1 ),
        //                 'is_spot_trading_allowed' => true,
        //                 'min_order_amount' => '2' } ),
        //         'timezone' => 'UTC' ),
        //     'time' => 1720058066 );
        $promisesRaw = array();
        // $sandboxMode = $this->safe_bool($this->options, 'sandboxMode', false);
        $rawFetchMarkets = $this->safe_list($this->options, 'fetchMarkets', array( 'spot', 'linear', 'inverse' ));
        for ($i = 0; $i < count($rawFetchMarkets); $i++) {
            $marketType = $rawFetchMarkets[$i];
            if ($marketType === 'spot') {
                $promisesRaw[] = $this->privateGetOpenV1TickersExchangeInfo ($params);
            }
        }
        $promises = $promisesRaw;
        $markets = array();
        for ($i = 0; $i < count($rawFetchMarkets); $i++) {
            $promise = $this->safe_dict($promises, $i);
            $dataDict = $this->safe_dict($promise, 'data', array());
            $promiseMarkets = $this->safe_list($dataDict, 'symbols', array());
            $markets = $this->array_concat($markets, $promiseMarkets);
        }
        return $this->parse_markets($markets);
    }

    public function parse_market(array $market): array {
        // $market = array( 'symbol' => 'BTC-USDT',
        //     'status' => 'TRADING',
        //     'base_asset' => 'USDT',
        //     'base_precision' => 2,
        //     'quote_asset' => 'BTC',
        //     'quote_precision' => 6,
        //     'order_types' => array( 'LIMIT', 'MARKET' ),
        //     'order_side' => array( 'buy' => 1, 'sell' => -1 ),
        //     'is_spot_trading_allowed' => true,
        //     'min_order_amount' => '2' );
        $origin_symbol = $this->safe_string($market, 'symbol');
        $active = $market['status'] === 'TRADING';
        $baseId = $this->safe_string($market, 'base_asset');
        $quoteId = $this->safe_string($market, 'quote_asset');
        $spot = $market['is_spot_trading_allowed'] === true;
        $swap = false;
        $future = false;
        $option = false;
        $type_ = 'spot';
        $contract = $swap || $future || $option;
        // if (($origin_symbol !== null) && !$spot) {
        if ($origin_symbol !== null) {
            $parts = explode('-', $origin_symbol);
            $baseId = $this->safe_string($parts, 0);
            $quoteId = $this->safe_string($parts, 1);
        }
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $settleId = $this->safe_string($market, 'settleCcy');
        $settle = $this->safe_currency_code($settleId);
        $base_precision = $this->safe_integer($market, 'base_precision');
        $quote_precision = $this->safe_integer($market, 'quote_precision');
        $fees = $this->safe_dict_2($this->fees, $type_, 'trading', array());
        $maxLeverage = $this->safe_string($market, 'lever', '1');
        $maxLeverage = Precise::string_max($maxLeverage, '1');
        $maxSpotCost = $this->safe_number($market, 'maxMktSz');
        $symbol = $base . '/' . $quote;
        $expiry = null;
        $strikePrice = null;
        $optionType = null;
        if ($contract) {
            $symbol = $symbol . ':' . $settle;
            // ???
            $expiry = $this->safe_integer($market, 'expTime');
            if ($future) {
                $ymd = $this->yymmdd($expiry);
                $symbol = $symbol . '-' . $ymd;
            } elseif ($option) {
                $strikePrice = $this->safe_string($market, 'stk');
                $optionType = $this->safe_string($market, 'optType');
                $ymd = $this->yymmdd($expiry);
                $symbol = $symbol . '-' . $ymd . '-' . $strikePrice . '-' . $optionType;
                $optionType = ($optionType === 'P') ? 'put' : 'call';
            }
        }
        return $this->extend($fees, array(
            'id' => $origin_symbol,
            'symbol' => $symbol,
            'base' => $base,
            'quote' => $quote,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'active' => $active,
            'type' => $type_,
            'spot' => $spot,
            'margin' => false,
            'swap' => false,
            'future' => false,
            'option' => false,
            'contract' => $contract,
            'settle' => $settle,
            'settleId' => $settleId,
            'contractSize' => $contract ? $this->safe_number($market, '???') : null,
            'linear' => $contract ? ($quoteId === $settleId) : null,
            'inverse' => $contract ? ($baseId === $settleId) : null,
            'expiry' => $expiry,
            'expiryDatetime' => $this->iso8601($expiry),
            'strike' => $strikePrice,
            'optionType' => $optionType,
            'maker' => 0.0001,
            'taker' => 0.0002,
            'created' => null,
            'precision' => array(
                'amount' => $base_precision,
                'price' => $quote_precision,
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => $this->parse_number('1'),
                    'max' => $this->parse_number($maxLeverage),
                ),
                'amount' => array(
                    'min' => $this->safe_number($market, 'min_order_amount'),
                    'max' => null,
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => $contract ? null : $maxSpotCost,
                ),
            ),
            'info' => $market,
        ));
    }

    public function fetch_ticker(string $symbol, ?array () $params): array {
        // $tickers = { 'code' => 0,
        //     'msg' => 'ok',
        //     'data' => array( array( 'symbol' => 'BTC-USDT',
        //         'amt_num' => 2,
        //         'qty_num' => 6,
        //         'amount' => '0',
        //         'volume' => '0',
        //         'high' => '68000',
        //         'low' => '68000',
        //         'change' => '0',
        //         'price' => '68000',
        //         'l_price' => '68000' } ),
        //     'time' => 1720064580 );
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = $this->publicGetOpenV1TickersMarket ($this->extend($request, $params));
        $timestamp = $this->safe_integer($response, 'time');
        $TickerList = $this->safe_list($response, 'data', array());
        $firstTicker = $this->safe_value($TickerList, 0, array());
        $firstTicker['timestamp'] = $timestamp;
        return $this->parse_ticker($firstTicker, $market);
    }

    public function fetch_order_book(string $symbol, ?int $limit, ?array () $params): array {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @see https://allinexchange.github.io/spot-docs/v1/en/#depth
         * @see https://allinexchange.github.io/spot-docs/v1/en/#$market-depth
         */
        // $orderbook = array(
        //     'code' => 0,
        //     'msg' => 'ok',
        //     'data' => array( 'bids' => array(
        //         array( 'price' => '67890.99', 'quantity' => '0.002000' ),
        //         array( 'price' => '67890.44', 'quantity' => '0.001000' ),
        //         array( 'price' => '62000.00', 'quantity' => '1.999000' ) ),
        //     'asks' => array(
        //         array( 'price' => '68000.00', 'quantity' => '0.357100' ),
        //         array( 'price' => '68123.44', 'quantity' => '0.230000' ),
        //     ) ));
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrderBook() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = $this->publicGetOpenV1DepthMarket ($this->extend($request, $params));
        $result = $this->safe_dict($response, 'data', array());
        $timestamp = $this->microseconds();
        return $this->parse_order_book($result, $symbol, $timestamp, 'bids', 'asks', 'price', 'quantity');
    }

    public function fetch_balance(?array () $params): array {
        /**
         * query for balance and get the amount of funds available for trading or funds locked in orders
         * @see https://allinexchange.github.io/spot-docs/v1/en/#account-balance
         */
        // $balances = array( 'code' => 0,
        //     'msg' => 'ok',
        //     'data' => array(
        //         array( 'amount' => '1000.1', 'freeze' => '0', 'symbol' => 'BTC' ),
        //         array( 'amount' => '0', 'freeze' => '0', 'symbol' => 'ETH' ),
        //         array( 'amount' => '0', 'freeze' => '0', 'symbol' => 'TRX' ),
        //         array( 'amount' => '99988000', 'freeze' => '6000', 'symbol' => 'USDT' ) ),
        //     'time' => 1720067861 );
        $this->load_markets();
        $response = $this->privateGetOpenV1Balance ($params);
        return $this->parse_balance($response);
    }

    public function fetch_ohlcv(string $symbol, ?string $timeframe, ?int $since, ?int $limit, ?array () $params): array {
        /**
         * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
         * @see https://allinexchange.github.io/spot-docs/v1/en/#$market-k-line-2
         * @see https://allinexchange.github.io/spot-docs/v1/en/#$market-k-line
         * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
         * @param {string} $timeframe the length of time each candle represents
         * @param {int} [$since] not support
         * @param {int} [$limit] not support
         */
        // $kline = array( 'code' => 0,
        //     'msg' => 'ok',
        //     'data':
        //      array( array( 'time' => 1720072680, 'open' => '68000.00', 'close' => '68000.00', 'high' => '68000.00', 'low' => '68000.00', 'volume' => '0', 'amount' => '0' ),
        //          array( 'time' => 1720072740, 'open' => '68000.00', 'close' => '68000.00', 'high' => '68000.00', 'low' => '68000.00', 'volume' => '0', 'amount' => '0' ),
        // ),
        //     'time' => 1720081645 );
        $market = $this->market($symbol);
        $marketId = $this->market_id($symbol);
        $duration = $this->timeframes[$timeframe];
        $params = $this->extend($params, array(
            'symbol' => $marketId,
            'type' => $duration,
        ));
        $response = $this->publicGetOpenV1KlineMarket ($params);
        $klines = $this->safe_list($response, 'data', array());
        return $this->parse_ohlcvs($klines, $market, $timeframe, $since, $limit);
    }

    public function fetch_orders(?string $symbol, ?int $since, ?int $limit, ?array () $params): array {
        /**
         * fetches information on multiple $orders made by the user
         * @see https://allinexchange.github.io/spot-docs/v1/en/#order-history
         * @param {string} $symbol unified $market $symbol of the $market $orders were made in
         * @param {int} [$since] Starting time, time stamp
         * @param {int} [$limit] not support
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->side] Direction，1 buy，-1 sell，0 all
         * @param {string} [$params->end] Closing time, time stamp
         */
        // $orders = array(
        //     'code' => 0,
        //     'msg' => 'ok',
        //     'data' => array(
        //         'count' => 4,
        //         'orders' => array(
        //             array(
        //                 'order_id' => '11574744030837944',
        //                 'trade_no' => '499016576021202015341',
        //                 'symbol' => 'BTC-USDT',
        //                 'price' => '7900',
        //                 'quantity' => '1',
        //                 'match_amt' => '0',
        //                 'match_qty' => '0',
        //                 'match_price' => '',
        //                 'side' => -1,
        //                 'order_type' => 1,
        //                 'status' => 6,
        //                 'create_at' => 1574744151836,
        //             ),
        //         ),
        //     ),
        //     'time' => 1720243714,
        // );
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrders() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = $this->extend($params, array(
            'symbol' => $market['id'],
            'side' => 0,
        ));
        $paginate = false;
        list($paginate, $params) = $this->handle_option_and_params($params, 'fetchOrders', 'paginate');
        if ($paginate) {
            return $this->fetch_paginated_call_dynamic('fetchOrders', $symbol, $since, $limit, $params);
        }
        if ($since !== null) {
            $request['start'] = $since;
        }
        $response = $this->privateGetOpenV1Orders ($request);
        $orders = $this->safe_list($this->safe_dict($response, 'data', array()), 'orders');
        return $this->parse_orders($orders, $market, $since, $limit, $params);
    }

    public function fetch_open_orders(?string $symbol, ?int $since, ?int $limit, ?array () $params): array {
        /**
         * fetch all unfilled currently open $orders
         * @see https://allinexchange.github.io/spot-docs/v1/en/#active-$orders
         * @param {string} $symbol unified $market $symbol of the $market $orders were made in
         * @param {int} [$since] not support
         * @param {int} [$limit] not support
         */
        // {
        //     'code' => 0,
        //     'data' => array(
        //         array(
        //             'symbol' => 'BTC-USDT',
        //             'order_id' => '11574744030837944',
        //             'trade_no' => '499016576021202015341',
        //             'price' => '7900',
        //             'quantity' => '1',
        //             'match_amt' => '0',
        //             'match_qty' => '0',
        //             'match_price' => '',
        //             'side' => -1,
        //             'order_type' => 1,
        //             'create_at' => 1574744151836
        //         ),
        //     ),
        // }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = $this->extend($params, array(
            'symbol' => $market['id'],
        ));
        $response = $this->privateGetOpenV1OrdersLast ($request);
        $orders = $this->safe_list($response, 'data');
        return $this->parse_orders($orders, $market);
    }

    public function fetch_order(string $id, ?string $symbol, ?array () $params): array {
        /**
         * fetches information on an $order made by the user
         * @see https://allinexchange.github.io/spot-docs/v1/en/#get-$order-details
         * @param {string} $id the $order $id
         * @param {string} $symbol unified $symbol of the $market the $order was made in
         */
        // {
        //     'code' => 0,
        //     'data' => {
        //         'order_id' => '11574751725833010',
        //         'trade_no' => '499073202290421221116',
        //         'symbol' => 'BTC-USDT',
        //         'price' => '70000',
        //         'quantity' => '0.0001',
        //         'match_amt' => '7',
        //         'match_qty' => '0.0001',
        //         'match_price' => '70000',
        //         'fee' => '0.0112',
        //         'side' => -1,
        //         'order_type' => 1,
        //         'status' => 4,
        //         'create_at' => 1574922846832,
        //         'trades' => [array(
        //             'amount' => '7',
        //             'price' => '70000',
        //             'quantity' => '0.0001',
        //             'fee' => '0.0112',
        //             'time' => 1574922846833
        //             )]
        //     }
        // }
        if ($id === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrder() requires a orderId argument');
        }
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrder() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'order_id' => $id,
            'symbol' => $market['id'],
        );
        $response = $this->privateGetOpenV1OrdersDetail ($request);
        $order = $this->safe_dict($response, 'data');
        return $this->parse_order($order, $market);
    }

    public function fetch_trades(string $symbol, ?int $since, ?int $limit, ?array () $params): array {
        /**
         * Each filled orders
         * @see https://allinexchange.github.io/spot-docs/v1/en/#each-filled-orders-2
         * @param {string} $symbol unified $symbol of the $market to fetch $trades for
         * @param {int} [$since] not support
         * @param {int} [$limit] not support
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         */
        // $trades = { 'code' => 0,
        //     'msg' => 'ok',
        //     'data' => array(
        //         array( 'amount' => '10200.00000015',
        //             'price' => '68000.000001',
        //             'side' => 1,
        //             'time' => 1719476275833,
        //             'volume' => '0.150000' ),
        //         array( 'amount' => '10200.00000015',
        //             'price' => '68000.000001',
        //             'side' => -1,
        //             'time' => 1719476383705,
        //             'volume' => '0.150000' } ),
        //     'time' => 1720167549 );
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = $this->publicGetOpenV1TradeMarket ($request);
        $trades = $this->safe_list($response, 'data');
        return $this->parse_trades($trades, $market, $since, $limit);
    }

    public function create_order(string $symbol, string $type, string $side, float $amount, ?float $price, ?array () $params): array {
        /**
         * create a trade order
         * @see https://allinexchange.github.io/spot-docs/v1/en/#place-new-order
         * @param {string} $symbol unified $symbol of the $market to create an order in
         * @param {string} $type 'market' or 'limit'
         * @param {string} $side 'buy' or 'sell'
         * @param {float} $amount how much of you want to trade in units of the base currency
         * @param {float} [$price] the $price that the order is to be fullfilled, in units of the quote currency, ignored in $market orders
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         */
        // {
        //     "code" => 0,
        //     "msg" => "ok",
        //     "data" => array(
        //         "order_id" => "xxx",
        //         "trade_no" => "xxx",
        //     ),
        // }
        $this->load_markets();
        $market = $this->market($symbol);
        $symbolId = $this->safe_string($market, 'id');
        $request = $this->create_order_request(
            $symbol,
            $type,
            $side,
            $amount,
            $price,
            $params,
            $market
        );
        $response = $this->privatePostOpenV1OrdersPlace ($request);
        $orderData = $this->safe_dict($response, 'data');
        $timestamp = $this->safe_integer($response, 'time');
        $this->log($response);
        return $this->parse_order(array(
            'order_id' => $this->safe_string($orderData, 'order_id'),
            'trade_no' => $this->safe_string($orderData, 'trade_no'),
            'symbol' => $symbolId,
            'price' => $price,
            'quantity' => $amount,
            'match_amt' => '0',
            'match_qty' => '0',
            'match_price' => '',
            'side' => $request['side'],
            'order_type' => $request['order_type'],
            'status' => 'open',
            'create_at' => $timestamp,
        ), $market);
    }

    public function cancel_order(string $id, ?string $symbol, ?array () $params): {} {
        /**
         * cancels an open order
         * @see https://allinexchange.github.io/spot-docs/v1/en/#cancel-an-order-in-order
         * @param {string} $id order $id
         * @param {string} $symbol unified $symbol of the $market the order was made in
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         */
        // $response = array( 'code' => 0,
        //     'msg' => 'ok',
        //     'data' => array( 'create_at' => 1720775927804,
        //         'left' => '0.100000',
        //         'match_amt' => '0',
        //         'match_price' => '0',
        //         'match_qty' => '0',
        //         'order_id' => '40',
        //         'order_type' => 1,
        //         'price' => '60000.00',
        //         'quantity' => '0.100000',
        //         'side' => 1,
        //         'status' => 6,
        //         'symbol' => 'BTC-USDT',
        //         'ticker' => 'BTC-USDT',
        //         'trade_no' => '40545292203741231233614' ),
        //     'time' => 1720775985 );
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' cancelOrder() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
            'order_id' => $id,
        );
        $response = $this->privatePostOpenV1OrdersCancel ($request);
        $orderData = $this->safe_dict($response, 'data');
        return $this->parse_order($orderData, $market);
    }

    public function create_order_request(string $symbol, string $type, string $side, float $amount, ?float $price, array () $params, array $market): array {
        $orderType = $this->to_order_type($type);
        $orderSide = $this->to_order_side($side);
        $request = array(
            'symbol' => $market['id'],
            'side' => $this->force_string($orderSide),
            'order_type' => $orderType,
            'quantity' => $this->force_string($amount),
        );
        if ($price !== null && $orderType === 'LIMIT') {
            $request['price'] = $this->force_string($price);
        }
        $requestParams = $this->omit($params, array(
            'postOnly', 'stopLossPrice', 'takeProfitPrice', 'stopPrice',
            'triggerPrice', 'trailingTriggerPrice',
            'trailingPercent', 'quoteOrderQty' ));
        return $this->extend($request, $requestParams);
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->implode_hostname($this->urls['api'][$api]) . $path;
        $nonce = (string) $this->nonce();
        $ts = $nonce;
        $client_id = $this->apiKey;
        $requestParams = $this->extend(array(), $params);
        if ($api === 'private') {
            $this->check_required_credentials();
            $requestParams = $this->extend($requestParams, array( 'ts' => $ts, 'nonce' => $nonce, 'sign' => '', 'client_id' => $this->apiKey ));
            $s = 'client_id=' . $client_id . '&$nonce=' . $nonce . '&$ts=' . $ts;
            $v = $this->hmac($this->encode($s), $this->encode($this->secret), 'sha256');
            $requestParams['sign'] = $v;
        }
        if ($method === 'GET') {
            if ($requestParams) {
                $url .= '?' . $this->rawencode($requestParams);
            }
        } elseif ($method === 'POST') {
            if (!$body) {
                $body = array();
            }
            $body = $this->extend($body, $requestParams);
            $headersPost = array(
                'Content-Type' => 'application/x-www-form-urlencoded',
            );
            if (!$headers) {
                $headers = $headersPost;
            } else {
                $headers = $this->extend($headers, $headersPost);
            }
        }
        if ($body) {
            $body = $this->urlencode($body);
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function parse_ticker(array $ticker, ?array $market = null): array {
        // $ticker = array( 'symbol' => 'BTC-USDT',
        //     'amt_num' => 2,
        //     'qty_num' => 6,
        //     'amount' => '0',
        //     'volume' => '0',
        //     'high' => '68000',
        //     'low' => '68000',
        //     'change' => '0',
        //     'price' => '68000',
        //     'l_price' => '68000' );
        $marketId = $this->safe_string($ticker, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market, null);
        $last = $this->safe_string($ticker, 'price');
        $baseVolume = $this->safe_string($ticker, 'volume'); // 数量
        $quoteVolume = $this->safe_string($ticker, 'amount'); // 金额
        $timestamp = $this->safe_integer($ticker, 'timestamp');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'info' => $ticker,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'open' => null,
            'high' => $this->safe_string($ticker, 'high'),
            'low' => $this->safe_string($ticker, 'low'),
            'close' => $last,
            'bid' => null,
            'bidVolume' => null,
            'ask' => null,
            'askVolume' => null,
            'vwap' => null,
            'last' => $last,
            'change' => $this->safe_string($ticker, 'change'),
            'average' => null,
            'quoteVolume' => $quoteVolume,
            'baseVolume' => $baseVolume,
        ), $market);
    }

    public function parse_balance(mixed $response): array {
        // $balances = array( 'code' => 0,
        //     'msg' => 'ok',
        //     'data' => array(
        //         array( 'amount' => '1000.1', 'freeze' => '0', 'symbol' => 'BTC' ),
        //         array( 'amount' => '0', 'freeze' => '0', 'symbol' => 'ETH' ),
        //         array( 'amount' => '0', 'freeze' => '0', 'symbol' => 'TRX' ),
        //         array( 'amount' => '99988000', 'freeze' => '6000', 'symbol' => 'USDT' ) ),
        //     'time' => 1720067861 );
        $originBalances = $this->safe_list($response, 'data', array());
        $timestamp = $this->safe_integer($response, 'timestamp');
        $balances = array(
            'info' => $originBalances,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
        );
        for ($i = 0; $i < count($originBalances); $i++) {
            $originBalance = $originBalances[$i];
            $symbol = $this->safe_string($originBalance, 'symbol');
            $used = $this->safe_string($originBalance, 'freeze');
            $total = $this->safe_string($originBalance, 'amount');
            $free = Precise::string_sub($total, $used);
            $balances[$symbol] = array(
                'free' => $free,
                'used' => $used,
                'total' => $total,
                'debt' => 0, // ???
            );
        }
        return $this->safe_balance($balances);
    }

    public function parse_ohlcv(mixed $ohlcv, ?array $market): array {
        // $klines = array( array( 'time' => 1720072680,
        //     'open' => '68000.00',
        //     'close' => '68000.00',
        //     'high' => '68000.00',
        //     'low' => '68000.00',
        //     'volume' => '0',
        //     'amount' => '0' ),
        // array( 'time' => 1720072740,
        //     'open' => '68000.00',
        //     'close' => '68000.00',
        //     'high' => '68000.00',
        //     'low' => '68000.00',
        //     'volume' => '0',
        //     'amount' => '0' ),
        // );
        return array(
            $this->safe_integer($ohlcv, 'time'),
            $this->safe_integer($ohlcv, 'open'),
            $this->safe_integer($ohlcv, 'high'),
            $this->safe_integer($ohlcv, 'low'),
            $this->safe_integer($ohlcv, 'close'),
            $this->safe_integer($ohlcv, 'volume'),
        );
    }

    public function parse_trade(array $trade, ?array $market): array {
        //         { 'amount' => '10200.00000015',
        //             'price' => '68000.000001',
        //             'side' => 1,
        //             'time' => 1719476275833,
        //             'volume' => '0.150000' }
        //         {
        //             'amount' => '7',
        //             'price' => '70000',
        //             'quantity' => '0.0001',
        //             'fee' => '0.0112',
        //             'time' => 1574922846833
        //             }
        $timestamp = $this->safe_integer($trade, 'time');
        $symbol = $this->safe_string($market, 'symbol');
        $sideNumber = $this->safe_integer($trade, 'side');
        $side = ($sideNumber === 1) ? 'buy' : 'sell';
        $amount = $this->safe_string($trade, 'amount');
        $volume = $this->safe_string($trade, 'volume');
        return $this->safe_trade(array(
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'id' => null,
            'order' => null,
            'type' => null,
            'side' => $side,
            'takerOrMaker' => null,
            'price' => $this->safe_string($trade, 'price'),
            'amount' => $amount,
            'cost' => $volume,
            'fee' => null,
        ), $market);
    }

    public function parse_order_type(?string $type_) {
        // int order_type, 1 Limit，3 Market
        if ($type_ === 'LIMIT' || $type_ === '1') {
            return 'limit';
        } elseif ($type_ === 'MARKET' || $type_ === '3') {
            return 'market';
        } else {
            throw new ExchangeError('unknown orderType => ' . $this->number_to_string($type_));
        }
    }

    public function to_order_type(string $type_) {
        // ccxt orderType to allin orderType
        if ($type_ === 'limit') {
            return 'LIMIT';
        } elseif ($type_ === 'market') {
            return 'MARKET';
        } else {
            throw new ExchangeError('unknown orderType => ' . $type_);
        }
    }

    public function parse_order_side(?int $side) {
        if ($side === 1) {
            return 'buy';
        } else {
            return 'sell';
        }
    }

    public function to_order_side(string $side) {
        if ($side === 'buy') {
            return 1;
        } else {
            return -1;
        }
    }

    public function parse_order_status(?int $status) {
        // Status 2 Outstanding，3 Partial filled，4 all filled，
        // 5 cancel after partial filled，
        $statusStr = $this->number_to_string($status);
        $statusDict = array(
            '1' => 'open',        // no
            '2' => 'open',        // 2 Outstanding
            '3' => 'open',        // 3 Partial filled
            '4' => 'closed',      // 4 all filled
            '5' => 'canceled',    // 5 canceled after partial filled
            '6' => 'canceled',    // 6 all cancel
        );
        return $this->safe_string($statusDict, $statusStr);
    }

    public function parse_order(array $order, ?array $market): array {
        // // fetchOrders //
        // $order = array(
        //     'order_id' => '11574744030837944',
        //     'trade_no' => '499016576021202015341', // removed
        //     'symbol' => 'BTC-USDT',
        //     'price' => '7900',
        //     'quantity' => '1',
        //     'match_amt' => '0',
        //     'match_qty' => '0',
        //     'match_price' => '',
        //     'side' => -1,
        //     'order_type' => 1,
        //     'status' => 6,
        //     'create_at' => 1574744151836,
        // );
        // // $order detail //
        //     'data' => {
        //         'order_id' => '11574751725833010',
        //         'trade_no' => '499073202290421221116', // removed
        //         'symbol' => 'BTC-USDT',
        //         'price' => '70000',
        //         'quantity' => '0.0001',
        //         'match_amt' => '7',
        //         'match_qty' => '0.0001',
        //         'match_price' => '70000',
        //         'fee' => '0.0112',
        //         'side' => -1,
        //         'order_type' => 1,
        //         'status' => 4,
        //         'create_at' => 1574922846832,
        //         'trades' => [array(
        //             'amount' => '7',
        //             'price' => '70000',
        //             'quantity' => '0.0001',
        //             'fee' => '0.0112',
        //             'time' => 1574922846833
        //             )]
        //     }
        $timestamp = $this->safe_integer($order, 'create_at');
        $symbol = $this->safe_string($market, 'symbol');
        $type_ = $this->parse_order_type($this->safe_string($order, 'order_type'));
        $side = $this->parse_order_side($this->safe_integer($order, 'side'));
        $price = $this->safe_string($order, 'price');
        $amount = $this->safe_string($order, 'quantity');
        $status = $this->parse_order_status($this->safe_integer($order, 'status'));
        $average = $this->safe_string($order, 'match_price');
        $filled = $this->safe_string($order, 'match_qty', '0');
        $cost = $this->safe_string($order, 'match_amt', '0');
        $feeCost = $this->safe_string($order, 'fee', null);
        $fee = null;
        if ($feeCost !== null) {
            $fee = array(
                'currency' => $this->safe_string($order, 'quoteAsset'),
                'cost' => $feeCost,
                'rate' => null,
            );
        }
        $trades = $this->safe_list($order, 'trades', array());
        return $this->safe_order(array(
            'info' => $order,
            'id' => $this->safe_string($order, 'order_id'),
            'clientOrderId' => null,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => null,
            'lastUpdateTimestamp' => null,
            'symbol' => $symbol,
            'type' => $type_,
            'timeInForce' => null,
            'postOnly' => null,
            'reduceOnly' => null,
            'side' => $side,
            'price' => $price,
            'triggerPrice' => null,
            'amount' => $amount,
            'cost' => $cost,
            'average' => $average,
            'filled' => $filled,
            'remaining' => null,
            'status' => $status,
            'fee' => $fee,
            'trades' => $trades,
        ), $market);
    }

    public function handle_errors(?int $statusCode, string $statusText, string $url, string $method, array $responseHeaders, string $responseBody, mixed $response, mixed $requestHeaders, mixed $requestBody) {
        if ($statusCode >= 400) {
            throw new NetworkError($this->id . ' ' . $statusText);
        }
        // $response = array( 'code' => 0,
        //     'msg' => 'ok',
        //     'data' => array(
        //         array( 'amount' => '1000.1', 'freeze' => '0', 'symbol' => 'BTC' ),
        //         array( 'amount' => '0', 'freeze' => '0', 'symbol' => 'ETH' ),
        //         array( 'amount' => '0', 'freeze' => '0', 'symbol' => 'TRX' ),
        //         array( 'amount' => '99988000', 'freeze' => '6000', 'symbol' => 'USDT' ) ),
        //     'time' => 1720067861 );
        if ($response === null) {
            return null; // fallback to default error handler
        }
        $responseCode => int = $this->safe_integer($response, 'code', 0);
        if ($responseCode !== 0) {
            $codeStr = $this->number_to_string($responseCode);
            $messageNew = $this->safe_string($response, 'msg');
            $msg = $this->id . ', code => ' . $codeStr . ', ' . $messageNew;
            $this->log($response);
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $codeStr, $msg);
        }
    }
}
