<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\allin as Exchange;
use ccxt\ExchangeError;
use ccxt\ArgumentsRequired;
use ccxt\NetworkError;
use ccxt\Precise;
use React\Async;
use React\Promise;
use React\Promise\PromiseInterface;

class allin extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'allin',
            'name' => 'allin',
            'countries' => array( 'US' ),
            'version' => 'v1',
            'userAgent' => null,
            'rateLimit' => 200,
            'hostname' => 'allin.pro',
            'pro' => true,
            'certified' => false,
            'options' => array(
                'sandboxMode' => false,
                'fetchMarkets' => array( 'spot', 'future' ),
                'defaultType' => 'spot',  // 'future', 'spot'
            ),
            'has' => array(
                'CORS' => true,
                'spot' => true,
                'margin' => true,
                'swap' => true,
                'future' => true,
                'option' => false,
                'borrowCrossMargin' => true,
                'cancelAllOrders' => true,
                'cancelAllOrdersAfter' => true,
                'cancelOrder' => true,
                'cancelOrders' => true,
                'cancelOrdersForSymbols' => true,
                'closeAllPositions' => false,
                'closePosition' => false,
                'createMarketBuyOrderWithCost' => true,
                'createMarketSellOrderWithCost' => true,
                'createOrder' => true,
                'createOrders' => true,
                'createOrderWithTakeProfitAndStopLoss' => false,
                'createPostOnlyOrder' => false,
                'createReduceOnlyOrder' => false,
                'createStopLimitOrder' => false,
                'createStopLossOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'createTakeProfitOrder' => true,
                'createTrailingAmountOrder' => true,
                'createTriggerOrder' => false,
                'editOrder' => true,
                'fetchBalance' => true,
                'fetchBorrowInterest' => false, // temporarily disabled, doesn't work
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchCanceledAndClosedOrders' => true,
                'fetchCanceledOrders' => true,
                'fetchClosedOrder' => true,
                'fetchClosedOrders' => true,
                'fetchCrossBorrowRate' => true,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => false,
                'fetchDeposit' => false,
                'fetchDepositAddress' => true,
                'fetchDepositAddresses' => false,
                'fetchDepositAddressesByNetwork' => true,
                'fetchDeposits' => true,
                'fetchDepositWithdrawFee' => 'emulated',
                'fetchDepositWithdrawFees' => true,
                'fetchFundingHistory' => true,
                'fetchFundingRate' => true, // emulated in exchange
                'fetchFundingRateHistory' => true,
                'fetchFundingRates' => true,
                'fetchGreeks' => true,
                'fetchIndexOHLCV' => true,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchLedger' => true,
                'fetchLeverage' => true,
                'fetchLeverageTiers' => true,
                'fetchMarginAdjustmentHistory' => false,
                'fetchMarketLeverageTiers' => true,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => true,
                'fetchMyLiquidations' => true,
                'fetchMySettlementHistory' => true,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenInterest' => true,
                'fetchOpenInterestHistory' => true,
                'fetchOpenOrder' => true,
                'fetchOpenOrders' => true,
                'fetchOption' => true,
                'fetchOptionChain' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => true,
                'fetchOrderTrades' => false,
                'fetchPosition' => true,
                'fetchPositionHistory' => 'emulated',
                'fetchPositions' => true,
                'fetchPositionsHistory' => true,
                'fetchPremiumIndexOHLCV' => true,
                'fetchSettlementHistory' => true,
                'fetchTicker' => true,
                'fetchTickers' => false,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchTransactions' => false,
                'fetchTransfers' => true,
                'fetchUnderlyingAssets' => false,
                'fetchVolatilityHistory' => true,
                'fetchWithdrawals' => true,
                'repayCrossMargin' => true,
                'sandbox' => true,
                'setLeverage' => true,
                'setMarginMode' => true,
                'setPositionMode' => true,
                'transfer' => true,
                'withdraw' => true,
            ),
            'timeframes' => array(
                '1m' => '1Min',
                '3m' => '3Min',
                '5m' => '5Min',
                '15m' => '15Min',
                '10m' => '10Min',
                '30m' => '30Min',
                '1h' => '1Hour',
                '2h' => '2Hour',
                '4h' => '4Hour',
                '6h' => '6Hour',
                '12h' => '12Hour',
                '1d' => '1Day',
                '1w' => '1Week',
            ),
            'urls' => array(
                'test' => array(
                    'spotPublic' => 'https://api.allintest.pro',
                    'spotPrivate' => 'https://api.allintest.pro',
                    'futurePublic' => 'https://api.allintest.pro/futuresopen',
                    'futurePrivate' => 'https://api.allintest.pro/futuresopen',
                ),
                'logo' => 'https://allinexchange.github.io/spot-docs/v1/en/images/logo-e47cee02.svg',
                'doc' => array( 'https://allinexchange.github.io/spot-docs/v1/en/#introduction' ),
                'api' => array(
                    'spotPublic' => 'https://api.allinpro.com',
                    'spotPrivate' => 'https://api.allinpro.com',
                    'futurePublic' => 'https://api.allinpro.com/futuresopen',
                    'futurePrivate' => 'https://api.allinpro.com/futuresopen',
                ),
            ),
            'api' => array(
                'spotPublic' => array(
                    'get' => array(
                        // public
                        '/open/v1/tickers/market' => 0,
                        '/open/v1/depth/market' => 0,
                        '/open/v1/trade/market' => 0,
                        '/open/v1/kline/market' => 0,
                        '/open/v1/tickers/exchange_info' => 0,
                    ),
                ),
                'spotPrivate' => array(
                    'get' => array(
                        '/open/v1/tickers' => 0,
                        '/open/v1/balance' => 0,
                        '/open/v1/timestamp' => 0,
                        '/open/v1/kline' => 0,
                        '/open/v1/depth' => 0,
                        '/open/v1/tickers/trade' => 0,
                        '/open/v1/orders/last' => 0,
                        '/open/v1/orders' => 0,
                        '/open/v1/orders/detail' => 0,
                        '/open/v1/orders/detailmore' => 0,
                        '/open/v1/orders/fee-rate' => 0,
                    ),
                    'post' => array(
                        '/open/v1/orders/place' => 0,
                        '/open/v1/orders/cancel' => 0,
                        '/open/v1/orders/batcancel' => 0,
                    ),
                ),
                'futurePublic' => array(
                    'get' => array(
                        // public
                        '/open/api/v2/market/kline' => 0,
                        '/open/api/v2/market/list' => 0,
                        '/open/api/v2/market/deals' => 0,
                        '/open/api/v2/market/depth' => 0,
                        '/open/api/v2/market/state' => 0,
                        '/open/api/v2/market/state/all' => 0,
                    ),
                ),
                'futurePrivate' => array(
                    'get' => array(
                        // private
                        '/open/api/v2/order/deals' => 0,
                        '/open/api/v2/order/finished' => 0,
                        '/open/api/v2/order/detail' => 0,
                        '/open/api/v2/order/pending' => 0,
                        '/open/api/v2/order/stop/pending' => 0,
                        '/open/api/v2/order/stop/finished' => 0,
                        '/open/api/v2/setting/leverage' => 0,
                        '/open/api/v2/asset/query' => 0,
                        '/open/api/v2/asset/history' => 0,
                        '/open/api/v2/position/pending' => 0,
                        '/open/api/v2/position/margin' => 0,
                    ),
                    'post' => array(
                        '/open/api/v2/position/margin' => 0,
                        '/open/api/v2/order/market' => 0,
                        '/open/api/v2/order/cancel/all' => 0,
                        '/open/api/v2/order/cancel' => 0,
                        '/open/api/v2/order/limit' => 0,
                        '/open/api/v2/order/stop' => 0,
                        '/open/api/v2/order/stop/cancel' => 0,
                        '/open/api/v2/order/stop/cancel/all' => 0,
                        '/open/api/v2/setting/leverage' => 0,
                        '/open/api/v2/position/close/limit' => 0,
                        '/open/api/v2/position/close/market' => 0,
                        '/open/api/v2/position/close/stop' => 0,
                    ),
                ),
            ),
            'exceptions' => array(
                'spot' => array(
                    'exact' => array(
                        '1010004' => '\\ccxt\\BadRequest',
                        '80005' => '\\ccxt\\BadRequest',
                    ),
                ),
                'exact' => array(
                    '1010037' => '\\ccxt\\OrderNotFound', // order not found
                    '1010312' => '\\ccxt\\BadRequest',
                    '1010313' => '\\ccxt\\AuthenticationError',
                    '1010314' => '\\ccxt\\RateLimitExceeded',   // Request cannot be more than %s/m
                    '1010315' => '\\ccxt\\RateLimitExceeded',   // no authority, ip is not allowed
                    '1010316' => '\\ccxt\\AuthenticationError', // no authority, sign is error
                    '1010007' => '\\ccxt\\RateLimitExceeded',   // call too frequently
                    '1010325' => '\\ccxt\\BadSymbol',           // symbol is empty
                    '10500' => '\\ccxt\\InsufficientFunds',         // system error
                    '1010367' => '\\ccxt\\OperationFailed',     // this ticker cannot be operated
                    '1010006' => '\\ccxt\\AuthenticationError', // invalid user_id
                    '1010009' => '\\ccxt\\BadRequest',          // side is error
                    '1010010' => '\\ccxt\\BadRequest',          // time is error
                    '1010008' => '\\ccxt\\BadRequest',          // status is error
                    '80005' => '\\ccxt\\BadRequest',            // param error
                    '1010013' => '\\ccxt\\BadRequest',          // ticker is paused
                    '1010018' => '\\ccxt\\BadRequest',          // cannot place market price order
                    '1010016' => '\\ccxt\\BadRequest',          // price is too small
                    '1010401' => '\\ccxt\\BadRequest',          // price is too high
                    '1010019' => '\\ccxt\\BadRequest',          // market price empty
                    '1010020' => '\\ccxt\\BadRequest',          // order_type must 1 or 3
                    '1010022' => '\\ccxt\\BadRequest',          // Below the minimum purchase price
                    '1010017' => '\\ccxt\\OrderNotFillable',          // Order amount cannot be less than %s
                    '1010023' => '\\ccxt\\BadRequest',          // Below the minimum sell price
                    '1010318' => '\\ccxt\\BadRequest',          // client_oid must be 21 in length, and must be numbers
                    '1010030' => '\\ccxt\\OrderNotFound',       // order_id not exists
                    '1010002' => '\\ccxt\\BadRequest',          // ticker_id is empty
                    '1010004' => '\\ccxt\\BadRequest',          // kline type is error
                    '1010406' => '\\ccxt\\BadRequest',          // Depth position error
                    '1010005' => '\\ccxt\\BadRequest',          // data is empty
                    '1010364' => '\\ccxt\\BadRequest',          // symbol count cannot be more than 10
                    'default' => '\\ccxt\\BaseError',
                    // future
                    '13128' => '\\ccxt\\InsufficientFunds',     // balance not enough
                    '13122' => '\\ccxt\\OrderNotFound',
                    '10013' => '\\ccxt\\OrderNotFound',
                    '10029' => '\\ccxt\\OrderNotFillable',      // order count over limit
                    '10056' => '\\ccxt\\ExchangeError',         // depth insufficient
                    '10057' => '\\ccxt\\ExchangeError',         // failure to collect reward
                    '10058' => '\\ccxt\\BadRequest',            // this event has reached its maximum number of participants
                    '10059' => '\\ccxt\\InsufficientFunds',     // this reward has been issued, please pay attention to the next activity
                    '10060' => '\\ccxt\\ExchangeError',         // activity has not started yet
                    '10061' => '\\ccxt\\BadRequest',            // position is not exist
                    '10062' => '\\ccxt\\InvalidOrder',          // the order quantity is too smal
                    '10063' => '\\ccxt\\InvalidOrder',          // failure to fulfil activity requirements
                    '13127' => '\\ccxt\\InvalidOrder',          // amount exceed limit
                    '10064' => '\\ccxt\\OperationRejected',     // ban trade
                    '20001' => '\\ccxt\\BadRequest',            // leverage illega
                    '20002' => '\\ccxt\\BadRequest',            // market  illegal
                    '20003' => '\\ccxt\\BadSymbol',             // position type illegal
                    '20004' => '\\ccxt\\BadRequest',            // adjust margin type illegal
                    '20005' => '\\ccxt\\BadRequest',            // order side illegal
                    '20006' => '\\ccxt\\BadRequest',            // order id illegal
                    '20007' => '\\ccxt\\BadRequest',            // position id illegal
                    '20008' => '\\ccxt\\BadRequest',            // quantity illegal
                    '20010' => '\\ccxt\\BadRequest',            // price illegal,
                    '20011' => '\\ccxt\\BadRequest',            // stop loss price type illegal
                    '20012' => '\\ccxt\\BadRequest',            // stop loss price illegal
                    '20013' => '\\ccxt\\BadRequest',            // take profit price type illegal
                    '20014' => '\\ccxt\\BadRequest',            // take profit price illegal
                    '20015' => '\\ccxt\\BadRequest',            // page illegal
                    '20016' => '\\ccxt\\BadRequest',            // page size illegal
                    '20017' => '\\ccxt\\BadRequest',            // start time illegal
                    '20018' => '\\ccxt\\BadRequest',            // end time illegal
                    '20019' => '\\ccxt\\BadRequest',            // kline type illegal
                    '20020' => '\\ccxt\\BadRequest',            // stop price illegal
                    '20021' => '\\ccxt\\BadRequest',            // current price illegal
                    '20022' => '\\ccxt\\BadRequest',            // step illegal
                    '12026' => '\\ccxt\\ExchangeError',         // internal error
                ),
            ),
        ));
    }

    public function fetch_markets($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * retrieves data on all $markets for allin
             * @see https://allinexchange.github.io/spot-docs/v1/en/#all-trading-pairs-2
             */
            // $markets_resp = { 'code' => 0,
            //     'msg' => 'ok',
            //     'data' => array( 'server_time' => 1720058066,
            //         'symbols' => array(
            //             array( 'symbol' => 'BTC-USDT',
            //                 'status' => 'TRADING',
            //                 'base_asset' => 'USDT',
            //                 'base_precision' => 2,
            //                 'base_asset_precision' => 8,
            //                 'quote_asset' => 'BTC',
            //                 'quote_precision' => 6,
            //                 'quote_asset_precision' => 8,
            //                 'order_types' => array( 'LIMIT', 'MARKET' ),
            //                 'order_side' => array( 'buy' => 2, 'sell' => 1 ),
            //                 'is_spot_trading_allowed' => true,
            //                 'min_order_amount' => '2' ),
            //             array( 'symbol' => 'ETH-USDT',
            //                 'status' => 'TRADING',
            //                 'base_asset' => 'USDT',
            //                 'base_precision' => 6,
            //                 'base_asset_precision' => 8,
            //                 'quote_asset' => 'ETH',
            //                 'quote_precision' => 6,
            //                 'quote_asset_precision' => 8,
            //                 'order_types' => array( 'LIMIT', 'MARKET' ),
            //                 'order_side' => array( 'buy' => 2, 'sell' => 1 ),
            //                 'is_spot_trading_allowed' => true,
            //                 'min_order_amount' => '2' } ),
            //         'timezone' => 'UTC' ),
            //     'time' => 1720058066 );
            $promisesRaw = array();
            // $sandboxMode = $this->safe_bool($this->options, 'sandboxMode', false);
            $rawFetchMarkets = $this->safe_list($this->options, 'fetchMarkets', array( 'spot', 'future' ));
            for ($i = 0; $i < count($rawFetchMarkets); $i++) {
                $marketType = $rawFetchMarkets[$i];
                if ($marketType === 'spot') {
                    $promisesRaw[] = $this->spotPublicGetOpenV1TickersExchangeInfo ($params);
                } elseif ($marketType === 'future') {
                    $promisesRaw[] = $this->futurePublicGetOpenApiV2MarketList ($params);
                }
            }
            $promises = Async\await(Promise\all($promisesRaw));
            $markets = array();
            $promiseMarkets = null;
            for ($i = 0; $i < count($rawFetchMarkets); $i++) {
                $type_ = $rawFetchMarkets[$i];
                $promise = $this->safe_dict($promises, $i);
                if ($type_ === 'spot') {
                    $dataDict = $this->safe_dict($promise, 'data', array());
                    $promiseMarkets = $this->safe_list($dataDict, 'symbols', array());
                } elseif ($type_ === 'future') {
                    $promiseMarkets = $this->safe_list($promise, 'data', array());
                } else {
                    continue;
                }
                $markets = $this->array_concat($markets, $promiseMarkets);
            }
            return $this->parse_markets($markets);
        }) ();
    }

    public function parse_market(array $market): array {
        $spot = $this->safe_bool($market, 'is_spot_trading_allowed', false) === true;
        if ($spot) {
            return $this->parse_spot_market($market);
        } else {
            return $this->parse_future_market($market);
        }
    }

    public function parse_future_market(array $market): array {
        // $market = array( 'type' => 1,
        //     'leverages' => array( '3', '5', '8', '10', '15', '20', '30', '50', '100' ),
        //     'merges' => array( '100', '10', '1', '0.1', '0.01' ),
        //     'name' => 'BTCUSDT',
        //     'stock' => 'BTC',
        //     'money' => 'USDT',
        //     'fee_prec' => 8,
        //     'tick_size' => '0.01',
        //     'stock_prec' => 8,
        //     'money_prec' => 2,
        //     'amount_prec' => 4,
        //     'amount_min' => '0.0001',
        //     'available' => true,
        //     'limits' => array( array( '2500.0001', '3', '0.036' ), array( '2000.0001', '5', '0.032' ), array( '1500.0001', '8', '0.028' ), array( '1000.0001', '10', '0.024' ), array( '500.0001', '15', '0.02' ), array( '250.0001', '20', '0.016' ), array( '100.0001', '30', '0.012' ), array( '50.0001', '50', '0.008' ), array( '20.0001', '100', '0.004' ) ),
        //     'sort' => 100 );
        $origin_symbol = $this->safe_string($market, 'name');
        $active = $this->safe_bool($market, 'available');
        $baseId = $this->safe_string($market, 'stock');
        $quoteId = $this->safe_string($market, 'money');
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $spot = false;
        $future = false;
        $swap = true;
        $option = false;
        $type_ = 'swap';
        $contract = $swap || $future || $option;
        $settle = null;
        $futureType = $this->safe_integer($market, 'type');
        $linear = null;
        if ($futureType === 1) {
            $settle = $quote;
            $linear = true;
        } else {
            $settle = $base;
            $linear = false;
        }
        $settleId = $settle;
        $symbol = $base . '/' . $quote . ':' . $settle;
        $fees = array();
        $leverages = $this->safe_list($market, 'leverages');
        $maxLeverage = $this->safe_string($leverages, strlen($leverages) - 1);
        $minLeverage = $this->safe_string($leverages, 0);
        $base_precision = $this->safe_integer($market, 'stock_prec');
        $quote_precision = $this->safe_integer($market, 'money_prec');
        return $this->extend($fees, array(
            'id' => $origin_symbol,
            'symbol' => $symbol,
            'base' => $base,
            'quote' => $quote,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'active' => $active,
            'type' => $type_,
            'spot' => $spot,
            'margin' => false,
            'swap' => $swap,
            'future' => $future,
            'option' => false,
            'contract' => $contract,
            'settle' => $settle,
            'settleId' => $settleId,
            'contractSize' => $contract ? 1 : null,
            'linear' => $linear,
            'inverse' => !$linear,
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'maker' => 0.0001,
            'taker' => 0.0002,
            'created' => null,
            'precision' => array(
                'amount' => $base_precision,
                'price' => $quote_precision,
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => $this->parse_number($minLeverage),
                    'max' => $this->parse_number($maxLeverage),
                ),
                'amount' => array(
                    'min' => $this->safe_number($market, 'amount_min'),
                    'max' => null,
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'info' => $market,
        ));
    }

    public function parse_spot_market(array $market): array {
        // $market = array( 'symbol' => 'BTC-USDT',
        //     'status' => 'TRADING',
        //     'base_asset' => 'USDT',
        //     'base_precision' => 2,
        //     'quote_asset' => 'BTC',
        //     'quote_precision' => 6,
        //     'order_types' => array( 'LIMIT', 'MARKET' ),
        //     'order_side' => array( 'buy' => 2, 'sell' => 1 ),
        //     'is_spot_trading_allowed' => true,
        //     'min_order_amount' => '2' );
        $origin_symbol = $this->safe_string($market, 'symbol');
        $active = $market['status'] === 'TRADING';
        $baseId = $this->safe_string($market, 'base_asset');
        $quoteId = $this->safe_string($market, 'quote_asset');
        $spot = true;
        $future = false;
        $swap = false;
        $option = false;
        $type_ = 'spot';
        $contract = $swap || $future || $option;
        // if (($origin_symbol !== null) && !$spot) {
        if ($origin_symbol !== null) {
            $parts = explode('-', $origin_symbol);
            $baseId = $this->safe_string($parts, 0);
            $quoteId = $this->safe_string($parts, 1);
        }
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $settleId = $this->safe_string($market, 'settleCcy');
        $settle = $this->safe_currency_code($settleId);
        $base_precision = $this->safe_integer($market, 'base_precision');
        $quote_precision = $this->safe_integer($market, 'quote_precision');
        $fees = $this->safe_dict_2($this->fees, $type_, 'trading', array());
        $maxLeverage = $this->safe_string($market, 'lever', '1');
        $maxLeverage = Precise::string_max($maxLeverage, '1');
        $maxSpotCost = $this->safe_number($market, 'maxMktSz');
        $symbol = $base . '/' . $quote;
        $expiry = null;
        $strikePrice = null;
        $optionType = null;
        if ($contract) {
            $symbol = $symbol . ':' . $settle;
            // ???
            $expiry = $this->safe_integer($market, 'expTime');
            if ($future) {
                $ymd = $this->yymmdd($expiry);
                $symbol = $symbol . '-' . $ymd;
            } elseif ($option) {
                $strikePrice = $this->safe_string($market, 'stk');
                $optionType = $this->safe_string($market, 'optType');
                $ymd = $this->yymmdd($expiry);
                $symbol = $symbol . '-' . $ymd . '-' . $strikePrice . '-' . $optionType;
                $optionType = ($optionType === 'P') ? 'put' : 'call';
            }
        }
        return $this->extend($fees, array(
            'id' => $origin_symbol,
            'symbol' => $symbol,
            'base' => $base,
            'quote' => $quote,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'active' => $active,
            'type' => $type_,
            'spot' => $spot,
            'margin' => false,
            'swap' => false,
            'future' => false,
            'option' => false,
            'contract' => $contract,
            'settle' => $settle,
            'settleId' => $settleId,
            'contractSize' => $contract ? $this->safe_number($market, '???') : null,
            'linear' => $contract ? ($quoteId === $settleId) : null,
            'inverse' => $contract ? ($baseId === $settleId) : null,
            'expiry' => $expiry,
            'expiryDatetime' => $this->iso8601($expiry),
            'strike' => $strikePrice,
            'optionType' => $optionType,
            'maker' => 0.0001,
            'taker' => 0.0002,
            'created' => null,
            'precision' => array(
                'amount' => $base_precision,
                'price' => $quote_precision,
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => $this->parse_number('1'),
                    'max' => $this->parse_number($maxLeverage),
                ),
                'amount' => array(
                    'min' => $this->safe_number($market, 'min_order_amount'),
                    'max' => null,
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => $contract ? null : $maxSpotCost,
                ),
            ),
            'info' => $market,
        ));
    }

    public function fetch_ticker(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            // spot
            // $tickers = { 'code' => 0,
            //     'msg' => 'ok',
            //     'data' => array( array( 'symbol' => 'BTC-USDT',
            //         'amt_num' => 2,
            //         'qty_num' => 6,
            //         'amount' => '0',
            //         'volume' => '0',
            //         'high' => '68000',
            //         'low' => '68000',
            //         'change' => '0',
            //         'price' => '68000',
            //         'l_price' => '68000' } ),
            //     'time' => 1720064580 );
            // future
            // {
            //     "code" => 0,
            //     "msg" => "success",
            //     "data" => {
            //       "market" => "ETHUSDT",
            //       "amount" => "4753.05",
            //       "high" => "1573.89",
            //       "last" => "1573.89",
            //       "low" => "1571.23",
            //       "open" => "1571.23",
            //       "change" => "0.0016929411989333",
            //       "period" => 86400,
            //       "volume" => "3.02",
            //       "funding_time" => 400,
            //       "position_amount" => "2.100",
            //       "funding_rate_last" => "0.00375",
            //       "funding_rate_next" => "0.00293873",
            //       "funding_rate_predict" => "-0.00088999",
            //       "insurance" => "10500.45426906585552617850",
            //       "sign_price" => "1581.98",
            //       "index_price" => "1578.12",
            //       "sell_total" => "112.974",
            //       "buy_total" => "170.914"
            //     }
            //   }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = null;
            if ($market['spot']) {
                $response = Async\await($this->spotPublicGetOpenV1TickersMarket ($this->extend($request, $params)));
            } else {
                $response = Async\await($this->futurePublicGetOpenApiV2MarketState ($this->extend($request, $params)));
            }
            $timestamp = $this->safe_timestamp($response, 'time', $this->milliseconds());
            $TickerList = $this->safe_list($response, 'data', array());
            $firstTicker = $this->safe_value($TickerList, 0, array());
            $firstTicker['timestamp'] = $timestamp;
            return $this->parse_ticker($firstTicker, $market);
        }) ();
    }

    public function fetch_order_book(string $symbol, ?int $limit = 50, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $limit, $params) {
            /**
             * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
             * @see https://allinexchange.github.io/spot-docs/v1/en/#depth
             * @see https://allinexchange.github.io/spot-docs/v1/en/#$market-depth
             */
            // $orderbook = array( 'code' => 0,
            //     'msg' => 'ok',
            //     'data' => array( 'bids' => array(
            //         array( 'price' => '63000.21', 'quantity' => '0.008694' ),
            //         array( 'price' => '62500.00', 'quantity' => '0.034351' ),
            //         array( 'price' => '62000.00', 'quantity' => '1.999000' ),
            //         array( 'price' => '40000.00', 'quantity' => '0.022334' ) ),
            //     'asks' => array( array( 'price' => '72875.36', 'quantity' => '0.036895' ),
            //         array( 'price' => '72951.29', 'quantity' => '0.040065' ),
            //         array( 'price' => '73104.20', 'quantity' => '0.040996' ),
            //         array( 'price' => '78000.00', 'quantity' => '0.003000' ) ) ),
            //     'time' => 1721550050 );
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchOrderBook() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $response = null;
            if ($market['spot']) {
                $request = array(
                    'symbol' => $market['id'],
                );
                $response = Async\await($this->spotPublicGetOpenV1DepthMarket ($request));
                $result = $this->safe_dict($response, 'data', array());
                $timestamp = $this->safe_timestamp($response, 'time');
                return $this->parse_order_book($result, $symbol, $timestamp, 'bids', 'asks', 'price', 'quantity');
            } else {
                $request = array(
                    'market' => $market['id'],
                );
                $response = Async\await($this->futurePublicGetOpenApiV2MarketDepth ($request));
                $result = $this->safe_dict($response, 'data', array());
                $timestamp = $this->safe_integer($result, 'time');
                return $this->parse_order_book($result, $symbol, $timestamp, 'bids', 'asks', 0, 1);
            }
        }) ();
    }

    public function fetch_balance($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * query for balance and get the amount of funds available for trading or funds locked in orders
             * @see https://allinexchange.github.io/spot-docs/v1/en/#account-balance
             * @param {string} [$params->type] wallet type, ['spot', 'future']
             */
            // $balances = array( 'code' => 0,
            //     'msg' => 'ok',
            //     'data' => array(
            //         array( 'amount' => '1000.1', 'freeze' => '0', 'symbol' => 'BTC' ),
            //         array( 'amount' => '0', 'freeze' => '0', 'symbol' => 'ETH' ),
            //         array( 'amount' => '0', 'freeze' => '0', 'symbol' => 'TRX' ),
            //         array( 'amount' => '99988000', 'freeze' => '6000', 'symbol' => 'USDT' ) ),
            //     'time' => 1720067861 );
            Async\await($this->load_markets());
            $response = null;
            $currentType = $this->safe_string($params, 'defaultType', null);
            if (!$currentType) {
                $currentType = $this->options['defaultType'];
            }
            if ($currentType === 'spot') {
                $response = Async\await($this->spotPrivateGetOpenV1Balance ());
                return $this->parse_spot_balance($response);
            } elseif ($currentType === 'future' || $currentType === 'swap') {
                $response = Async\await($this->futurePrivateGetOpenApiV2AssetQuery ());
                return $this->parse_future_balance($response);
            }
        }) ();
    }

    public function fetch_leverage(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetch the set $leverage for a $market
             * @param {string} $symbol unified $market $symbol
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=$leverage-structure $leverage structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'market' => $market['id'],
            );
            $leverage = Async\await($this->futurePrivateGetOpenApiV2SettingLeverage ($request));
            return $this->parse_leverage($leverage, $market);
        }) ();
    }

    public function fetch_position(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchPosition() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $postionList = Async\await($this->fetch_positions(array( $symbol ), $params));
            if (strlen($postionList) > 0) {
                return $postionList[0];
            } else {
                return null;
            }
        }) ();
    }

    public function fetch_positions(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            Async\await($this->load_markets());
            $symbol = null;
            $request = array();
            if (($symbols !== null) && gettype($symbols) === 'array' && array_keys($symbols) === array_keys(array_keys($symbols))) {
                $symbolsLength = count($symbols);
                if ($symbolsLength > 1) {
                    throw new ArgumentsRequired($this->id . ' fetchPositions() does not accept an array with more than one symbol');
                } elseif ($symbolsLength === 1) {
                    $symbol = $symbols[0];
                }
                $symbols = $this->market_symbols($symbols);
            } elseif ($symbols !== null) {
                $symbol = $symbols;
                $symbols = array( $this->symbol($symbol) );
            }
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['market'] = $market['id'];
            }
            $response = Async\await($this->futurePrivateGetOpenApiV2PositionPending ($request));
            $positions = $this->safe_list($response, 'data', array());
            $positionList = array();
            for ($i = 0; $i < count($positions); $i++) {
                $pos = $positions[$i];
                $marketId = $pos['market'];
                $market = $this->safe_market($marketId);
                $ccPos = $this->parse_position($pos, $market);
                $positionList[] = $ccPos;
            }
            if ($symbols !== null) {
                return $this->filter_by_array_positions($positionList, 'symbol', $symbols, false);
            } else {
                return $positionList;
            }
        }) ();
    }

    public function fetch_ohlcv(string $symbol, string $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $timeframe, $since, $limit, $params) {
            /**
             * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
             * @see https://allinexchange.github.io/spot-docs/v1/en/#$market-k-line-2
             * @see https://allinexchange.github.io/spot-docs/v1/en/#$market-k-line
             * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
             * @param {string} $timeframe the length of time each candle represents
             * @param {int} [$since] timestamp in ms of the earliest funding rate to fetch
             * @param {int} [$limit] the maximum amount of [funding rate structures]
             */
            // $kline = array( 'code' => 0,
            //     'msg' => 'ok',
            //     'data':
            //      array( array( 'time' => 1720072680, 'open' => '68000.00', 'close' => '68000.00', 'high' => '68000.00', 'low' => '68000.00', 'volume' => '0', 'amount' => '0' ),
            //          array( 'time' => 1720072740, 'open' => '68000.00', 'close' => '68000.00', 'high' => '68000.00', 'low' => '68000.00', 'volume' => '0', 'amount' => '0' ),
            // ),
            //     'time' => 1720081645 );
            // $futureKline = array( 'code' => 0,
            //     'msg' => 'success',
            //     'data' => array( array( 1722669840, '66019', '66019', '66019', '66019', '0', '0', 'BTCUSDT' ),
            //         array( 1722669900, '66019', '66019', '66019', '66019', '0', '0', 'BTCUSDT' ),
            //         array( 1722669960, '66019', '66019', '66019', '66019', '0', '0', 'BTCUSDT' ),
            //         array( 1722670020, '66019', '66019', '66019', '66019', '0', '0', 'BTCUSDT' ) ),
            //     'time' => 1722670456 );
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $marketId = $this->market_id($symbol);
            $spot = $market['spot'];
            // $swap = $market['swap'];
            $duration = $this->timeframes[$timeframe];
            $request = array();
            $response = null;
            if ($spot) {
                $request = array(
                    'symbol' => $marketId,
                    'type' => $duration,
                );
                $response = Async\await($this->spotPublicGetOpenV1KlineMarket ($request));
            } else {
                $start = null;
                $end = null;
                // $duration time steep
                $interval = $this->parse_timeframe($timeframe);
                if ($limit && $since) {
                    $start = $since;
                    $end = $start . $limit * $interval * 1000 - 1;
                } elseif ($limit) {
                    $end = $this->milliseconds();
                    $start = $end - $limit * $interval * 1000;
                } elseif ($since) {
                    $end = $this->milliseconds();
                    $start = $since;
                }
                $duration = strtolower('strval' ($duration));
                $request = array(
                    'market' => $marketId,
                    'type' => $duration,
                );
                if ($start !== null) {
                    $request['start_time'] = $this->parse_to_int($start / 1000);
                }
                if ($end !== null) {
                    $request['end_time'] = $this->parse_to_int($end / 1000);
                }
                $response = Async\await($this->futurePublicGetOpenApiV2MarketKline ($request));
            }
            $klines = $this->safe_list($response, 'data', array());
            return $this->parse_ohlcvs($klines, $market, $timeframe, $since, $limit);
        }) ();
    }

    public function fetch_orders(?string $symbol, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetches information on multiple $orders made by the user
             * @see https://allinexchange.github.io/spot-docs/v1/en/#order-history
             * @param {string} $symbol unified $market $symbol of the $market $orders were made in
             * @param {int} [$since] Starting time, time stamp
             * @param {int} [$limit] not support
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->side] Direction，1 sell，2 buy，0 all
             * @param {string} [$params->end] Closing time, time stamp
             */
            // $orders = array(
            //     'code' => 0,
            //     'msg' => 'ok',
            //     'data' => array(
            //         'count' => 4,
            //         'orders' => array(
            //             array(
            //                 'order_id' => '11574744030837944',
            //                 'trade_no' => '499016576021202015341',
            //                 'symbol' => 'BTC-USDT',
            //                 'price' => '7900',
            //                 'quantity' => '1',
            //                 'match_amt' => '0',
            //                 'match_qty' => '0',
            //                 'match_price' => '',
            //                 'side' => 1,
            //                 'order_type' => 1,
            //                 'status' => 6,
            //                 'create_at' => 1574744151836,
            //             ),
            //         ),
            //     ),
            //     'time' => 1720243714,
            // );
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchOrders() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = null;
            $paginate = false;
            list($paginate, $params) = $this->handle_option_and_params($params, 'fetchOrders', 'paginate');
            if ($paginate) {
                return Async\await($this->fetch_paginated_call_dynamic('fetchOrders', $symbol, $since, $limit, $params));
            }
            $response = null;
            if ($market['spot']) {
                $request = array(
                    'symbol' => $market['id'],
                    'side' => 0,
                );
                if ($since !== null) {
                    $request['start'] = $since;
                }
                $response = Async\await($this->spotPrivateGetOpenV1Orders ($request));
            } else {
                $request = array(
                    'market' => $market['id'],
                );
                if ($since !== null) {
                    $request['start_time'] = $since;
                }
                $response = Async\await($this->futurePrivateGetOpenApiV2OrderFinished ($request));
            }
            $orders = $this->safe_list_2($this->safe_dict($response, 'data', array()), 'orders', 'records');
            if ($orders) {
                return $this->parse_orders($orders, $market, $since, $limit, $params);
            } else {
                return array();
            }
        }) ();
    }

    public function fetch_open_orders(?string $symbol, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all unfilled currently open $orders
             * @see https://allinexchange.github.io/spot-docs/v1/en/#active-$orders
             * @param {string} $symbol unified $market $symbol of the $market $orders were made in
             * @param {int} [$since] not support
             * @param {int} [$limit] not support
             */
            // {
            //     'code' => 0,
            //     'data' => array(
            //         array(
            //             'symbol' => 'BTC-USDT',
            //             'order_id' => '11574744030837944',
            //             'trade_no' => '499016576021202015341',
            //             'price' => '7900',
            //             'quantity' => '1',
            //             'match_amt' => '0',
            //             'match_qty' => '0',
            //             'match_price' => '',
            //             'side' => -1,
            //             'order_type' => 1,
            //             'create_at' => 1574744151836
            //         ),
            //     ),
            // }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = null;
            $response = null;
            $orders = null;
            if ($market['spot']) {
                $request = array(
                    'symbol' => $market['id'],
                );
                $response = Async\await($this->spotPrivateGetOpenV1OrdersLast ($request));
                $orders = $this->safe_list($response, 'data');
            } else {
                $request = array(
                    'market' => $market['id'],
                );
                $response = Async\await($this->futurePrivateGetOpenApiV2OrderPending ($request));
                $orders = $this->safe_list($this->safe_dict($response, 'data'), 'records');
            }
            if ($orders) {
                return $this->parse_orders($orders, $market);
            } else {
                return array();
            }
        }) ();
    }

    public function fetch_order(string $id, ?string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * fetches information on an $order made by the user
             * @see https://allinexchange.github.io/spot-docs/v1/en/#get-$order-details
             * @param {string} $id the $order $id
             * @param {string} $symbol unified $symbol of the $market the $order was made in
             */
            // {
            //     'code' => 0,
            //     'data' => {
            //         'order_id' => '11574751725833010',
            //         'trade_no' => '499073202290421221116',
            //         'symbol' => 'BTC-USDT',
            //         'price' => '70000',
            //         'quantity' => '0.0001',
            //         'match_amt' => '7',
            //         'match_qty' => '0.0001',
            //         'match_price' => '70000',
            //         'fee' => '0.0112',
            //         'side' => -1,
            //         'order_type' => 1,
            //         'status' => 4,
            //         'create_at' => 1574922846832,
            //         'trades' => [array(
            //             'amount' => '7',
            //             'price' => '70000',
            //             'quantity' => '0.0001',
            //             'fee' => '0.0112',
            //             'time' => 1574922846833
            //             )]
            //     }
            // }
            // future
            // $futureOrder = array(
            //     'code' => 0,
            //     'msg' => 'success',
            //     'data' => array(
            //         'order_id' => 1470445037,
            //         'position_id' => 0,
            //         'market' => 'ETHUSDT',
            //         'type' => 2,
            //         'side' => 1,
            //         'left' => '0',
            //         'amount' => '1',
            //         'filled' => '1',
            //         'deal_fee' => '0.7869',
            //         'price' => '0',
            //         'avg_price' => '1573.84',
            //         'deal_stock' => '1573.84',
            //         'position_type' => 1,
            //         'leverage' => '20',
            //         'update_time' => 1697616547.90107,
            //         'create_time' => 1697616547.901067,
            //         'status' => 3,
            //         'stop_loss_price' => '-',
            //         'take_profit_price' => '-',
            //         'client_oid' => '36341ddd362363263626',
            //     ),
            // );
            if ($id === null) {
                throw new ArgumentsRequired($this->id . ' fetchOrder() requires a orderId argument');
            }
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchOrder() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $response = null;
            if ($market['spot']) {
                $request = array(
                    'order_id' => $id,
                    'symbol' => $market['id'],
                );
                $response = Async\await($this->spotPrivateGetOpenV1OrdersDetail ($request));
            } else {
                $request = array(
                    'order_id' => $id,
                    'market' => $market['id'],
                );
                $response = Async\await($this->futurePrivateGetOpenApiV2OrderDetail ($request));
            }
            $order = $this->safe_dict($response, 'data');
            return $this->parse_order($order, $market);
        }) ();
    }

    public function fetch_trades(string $symbol, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * Each filled orders
             * @see https://allinexchange.github.io/spot-docs/v1/en/#each-filled-orders-2
             * @param {string} $symbol unified $symbol of the $market to fetch $trades for
             * @param {int} [$since] not support
             * @param {int} [$limit] not support
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             */
            // $trades = { 'code' => 0,
            //     'msg' => 'ok',
            //     'data' => array(
            //         array( 'amount' => '10200.00000015',
            //             'price' => '68000.000001',
            //             'side' => 1,
            //             'time' => 1719476275833,
            //             'volume' => '0.150000' ),
            //         array( 'amount' => '10200.00000015',
            //             'price' => '68000.000001',
            //             'side' => -1,
            //             'time' => 1719476383705,
            //             'volume' => '0.150000' } ),
            //     'time' => 1720167549 );
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $response = null;
            if ($market['spot']) {
                $request = array(
                    'symbol' => $market['id'],
                );
                $response = Async\await($this->spotPublicGetOpenV1TradeMarket ($request));
            } else {
                $request = array(
                    'market' => $market['id'],
                );
                $response = Async\await($this->futurePublicGetOpenApiV2MarketDeals ($request));
            }
            $trades = $this->safe_list($response, 'data');
            return $this->parse_trades($trades, $market, $since, $limit);
        }) ();
    }

    public function create_order(string $symbol, string $type, string $side, float $amount, ?float $price, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $type, $side, $amount, $price, $params) {
            /**
             * create a trade order
             * @see https://allinexchange.github.io/spot-docs/v1/en/#place-new-order
             * @param {string} $symbol unified $symbol of the $market to create an order in
             * @param {string} $type 'market' or 'limit'
             * @param {string} $side 'buy' or 'sell'
             * @param {float} $amount how much of you want to trade in units of the base currency
             * @param {float} [$price] the $price that the order is to be fullfilled, in units of the quote currency, ignored in $market orders
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             */
            // {
            //     "code" => 0,
            //     "msg" => "ok",
            //     "data" => array(
            //         "order_id" => "xxx",
            //         "trade_no" => "xxx",
            //     ),
            // }
            // future
            // array("code" => 0, "msg" => "success", "data" => 5023856, "time" => 1723130482)
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $symbolId = $this->safe_string($market, 'id');
            $response = null;
            $allinOrderSide = null;
            $allinOrderType = null;
            $timestamp = null;  // $timestamp in s
            $orderId = null;
            $tradeNo = null;
            if ($market['spot']) {
                $request = $this->create_spot_order_request(
                    $symbol,
                    $type,
                    $side,
                    $amount,
                    $price,
                    $params,
                    $market
                );
                $response = Async\await($this->spotPrivatePostOpenV1OrdersPlace ($request));
                $orderData = $this->safe_dict($response, 'data');
                $timestamp = $this->safe_integer($response, 'time');  // $timestamp in s
                $orderId = $this->safe_string($orderData, 'order_id');
                $tradeNo = $this->safe_string($orderData, 'trade_no');
                $allinOrderSide = $request['side'];
                $allinOrderType = $request['order_type'];
            } else {
                $request = $this->create_future_order_request(
                    $symbol,
                    $type,
                    $side,
                    $amount,
                    $price,
                    $params,
                    $market
                );
                if ($type === 'limit') {
                    $response = Async\await($this->futurePrivatePostOpenApiV2OrderLimit ($request));
                } else {
                    $response = Async\await($this->futurePrivatePostOpenApiV2OrderMarket ($request));
                }
                $timestamp = $this->safe_integer($response, 'time');  // $timestamp in s
                $orderId = $this->safe_string($response, 'data');
                $tradeNo = null;
                $allinOrderSide = $this->to_order_side($side);
                $allinOrderType = $this->to_future_order_type($type);
            }
            return $this->parse_order(array(
                'order_id' => $orderId,
                'trade_no' => $tradeNo,
                'symbol' => $symbolId,
                'price' => $price,
                'quantity' => $amount,
                'match_amt' => '0',
                'match_qty' => '0',
                'match_price' => '',
                'side' => $allinOrderSide,
                'order_type' => $allinOrderType,
                'status' => 'open',
                'create_at' => $timestamp,
            ), $market);
        }) ();
    }

    public function cancel_order(string $id, ?string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * cancels an open order
             * @see https://allinexchange.github.io/spot-docs/v1/en/#cancel-an-order-in-order
             * @param {string} $id order $id
             * @param {string} $symbol unified $symbol of the $market the order was made in
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             */
            // $response = array( 'code' => 0,
            //     'msg' => 'ok',
            //     'data' => array( 'create_at' => 1720775927804,
            //         'left' => '0.100000',
            //         'match_amt' => '0',
            //         'match_price' => '0',
            //         'match_qty' => '0',
            //         'order_id' => '40',
            //         'order_type' => 1,
            //         'price' => '60000.00',
            //         'quantity' => '0.100000',
            //         'side' => 1,
            //         'status' => 6,
            //         'symbol' => 'BTC-USDT',
            //         'ticker' => 'BTC-USDT',
            //         'trade_no' => '40545292203741231233614' ),
            //     'time' => 1720775985 );
            // future
            // array("code" => 0, "msg" => "success", "data" => 2591546, "time" => 1723187903)
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' cancelOrder() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = null;
            $response = null;
            if ($market['spot']) {
                $request = array(
                    'symbol' => $market['id'],
                    'order_id' => $id,
                );
                $response = Async\await($this->spotPrivatePostOpenV1OrdersCancel ($request));
                $orderData = $this->safe_dict($response, 'data');
                return $this->parse_order($orderData, $market);
            } else {
                $request = array(
                    'market' => $market['id'],
                    'order_id' => $id,
                );
                $response = Async\await($this->futurePrivatePostOpenApiV2OrderCancel ($request));
                return array(
                    'info' => $response,
                    'id' => $id,
                    'symbol' => $symbol,
                    'status' => 'open',
                    'timestamp' => $this->safe_timestamp($response, 'time'),
                );
            }
        }) ();
    }

    public function create_spot_order_request(string $symbol, string $type, string $side, float $amount, ?float $price, array () $params, array $market): array {
        $orderType = $this->to_spot_order_type($type);
        $orderSide = $this->to_order_side($side);
        $request = array(
            'symbol' => $market['id'],
            'side' => $this->force_string($orderSide),
            'order_type' => $orderType,
            'quantity' => $this->amount_to_precision($symbol, $amount),
        );
        if ($price !== null && $orderType === 'LIMIT') {
            $request['price'] = $this->price_to_precision($symbol, $price);
        }
        $requestParams = $this->omit($params, array(
            'postOnly', 'stopLossPrice', 'takeProfitPrice', 'stopPrice',
            'triggerPrice', 'trailingTriggerPrice',
            'trailingPercent', 'quoteOrderQty' ));
        return $this->extend($request, $requestParams);
    }

    public function create_future_order_request(string $symbol, string $type, string $side, float $amount, ?float $price, array () $params, array $market): array {
        $orderSide = $this->to_order_side($side);
        $request = array(
            'market' => $market['id'],
            'side' => $orderSide,
            'quantity' => $this->amount_to_precision($symbol, $amount),
        );
        if ($price !== null && $type === 'limit') {
            $request['price'] = $this->price_to_precision($symbol, $price);
        }
        return $request;
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->implode_hostname($this->urls['api'][$api]) . $path;
        $nonce = (string) $this->nonce();
        $ts = $nonce;
        $client_id = $this->apiKey;
        $requestParams = $this->extend(array(), $params);
        if (($api === 'spotPrivate') || ($api === 'futurePrivate') || ($api === 'private')) {
            $this->check_required_credentials();
            $requestParams = $this->extend($requestParams, array( 'ts' => $ts, 'nonce' => $nonce, 'sign' => '', 'client_id' => $this->apiKey ));
            $s = 'client_id=' . $client_id . '&$nonce=' . $nonce . '&$ts=' . $ts;
            $v = $this->hmac($this->encode($s), $this->encode($this->secret), 'sha256');
            $requestParams['sign'] = $v;
        }
        if ($method === 'GET') {
            if ($requestParams) {
                $url .= '?' . $this->rawencode($requestParams);
            }
        } elseif ($method === 'POST') {
            if (!$body) {
                $body = array();
            }
            $body = $this->extend($body, $requestParams);
            $headersPost = array(
                'Content-Type' => 'application/x-www-form-urlencoded',
            );
            if (!$headers) {
                $headers = $headersPost;
            } else {
                $headers = $this->extend($headers, $headersPost);
            }
        }
        if ($body) {
            $body = $this->urlencode($body);
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function set_leverage(?int $leverage, ?string $symbol = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($leverage, $symbol, $params) {
            /**
             * set the level of $leverage for a $market
             * @param {string} [$params->marginMode] set marginMode
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $newMarginMode = $this->safe_string($params, 'marginMode', null);
            $oldLeverage = Async\await($this->fetch_leverage($symbol, $params));
            $oldLeverageNum = $this->safe_integer($oldLeverage, 'longLeverage');
            $oldMarginMode = $this->safe_string($oldLeverage, 'marginMode');
            if (($newMarginMode && $newMarginMode !== $oldMarginMode) || $oldLeverageNum !== $leverage) {
                $reqMarginMode = $newMarginMode ? $newMarginMode : $oldMarginMode;
                $request = array(
                    'market' => $market['id'],
                    'leverage' => $leverage,
                    'position_type' => $this->to_leverage_mode($reqMarginMode),
                );
                return Async\await($this->futurePrivatePostOpenApiV2SettingLeverage ($request));
            }
            return array();
        }) ();
    }

    public function parse_ticker(array $ticker, ?array $market = null): array {
        // $ticker = array( 'symbol' => 'BTC-USDT',
        //     'amt_num' => 2,
        //     'qty_num' => 6,
        //     'amount' => '0',
        //     'volume' => '0',
        //     'high' => '68000',
        //     'low' => '68000',
        //     'change' => '0',
        //     'price' => '68000',
        //     'l_price' => '68000' );
        // future
        // {
        //         "market" => "1000SHIBUSDT",
        //         "amount" => "35226256.573504",
        //         "high":"0.009001",
        //         "last" => "0.008607",
        //         "low" => "0.008324",
        //         "open" => "0.008864",
        //         "period" => 86400,
        //         "volume":"4036517772",
        //         "change" => "-0.0289936823104693",
        //         "funding_time" => 79,
        //         "position_amount" => "0",
        //         "funding_rate_last" => "0.00092889",
        //         "funding_rate_next":"0.00078062",
        //         "funding_rate_predict" => "0.00059084",
        //         "insurance" => "12920.37897885999447286856",
        //         "sign_price" => "0.008607",
        //         "index_price" => "0.008606",
        //         "sell_total":"46470921",
        //         "buy_total" => "43420303"
        //       }
        $marketId = $this->safe_string_2($ticker, 'symbol', 'markt');
        $symbol = $this->safe_symbol($marketId, $market, null);
        $last = $this->safe_string_2($ticker, 'price', 'last');
        $baseVolume = $this->safe_string($ticker, 'volume'); // 数量
        $quoteVolume = $this->safe_string($ticker, 'amount'); // 金额
        $timestamp = $this->safe_integer($ticker, 'timestamp');
        $open_ = $this->safe_number($ticker, 'open');
        $high = $this->safe_number($ticker, 'high');
        $low = $this->safe_number($ticker, 'low');
        if ($timestamp !== null) {
            $timestamp = $this->milliseconds();
        }
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'info' => $ticker,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'open' => $open_,
            'high' => $high,
            'low' => $low,
            'close' => $last,
            'bid' => null,
            'bidVolume' => null,
            'ask' => null,
            'askVolume' => null,
            'vwap' => null,
            'last' => $last,
            'change' => $this->safe_string($ticker, 'change'),
            'average' => null,
            'quoteVolume' => $quoteVolume,
            'baseVolume' => $baseVolume,
        ), $market);
    }

    public function parse_spot_balance(mixed $response): array {
        // $balances = array( 'code' => 0,
        //     'msg' => 'ok',
        //     'data' => array(
        //         array( 'amount' => '1000.1', 'freeze' => '0', 'symbol' => 'BTC' ),
        //         array( 'amount' => '0', 'freeze' => '0', 'symbol' => 'ETH' ),
        //         array( 'amount' => '0', 'freeze' => '0', 'symbol' => 'TRX' ),
        //         array( 'amount' => '99988000', 'freeze' => '6000', 'symbol' => 'USDT' ) ),
        //     'time' => 1720067861 );
        $originBalances = $this->safe_list($response, 'data', array());
        $timestamp = $this->safe_timestamp($response, 'time');
        $balances = array(
            'info' => $originBalances,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
        );
        for ($i = 0; $i < count($originBalances); $i++) {
            $originBalance = $originBalances[$i];
            $symbol = $this->safe_string($originBalance, 'symbol');
            $used = $this->safe_string($originBalance, 'freeze');
            $total = $this->safe_string($originBalance, 'amount');
            $free = Precise::string_sub($total, $used);
            $balances[$symbol] = array(
                'free' => $free,
                'used' => $used,
                'total' => $total,
                'debt' => 0, // ???
            );
        }
        return $this->safe_balance($balances);
    }

    public function parse_future_balance(mixed $response): array {
        // $response = array(
        //     'code' => 0,
        //     'msg' => 'success',
        //     'data' => array(
        //         'USDT' => array(
        //             'available' => '8300.569',
        //             'frozen' => '0',
        //             'margin' => '0',
        //             'balance_total' => '8300.569',
        //             'profit_unreal' => '0',
        //             'transfer' => '8300.569',
        //             'bonus' => '0',
        //         ),
        //     ),
        //     'time' => 1720067861,
        // );
        $originBalances = $this->safe_dict($response, 'data', array());
        $timestamp = $this->safe_timestamp($response, 'time');
        $balances = array(
            'info' => $originBalances,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
        );
        $keys = is_array($originBalances) ? array_keys($originBalances) : array();
        for ($i = 0; $i < count($keys); $i++) {
            $key = $keys[$i];
            $originBalance = $originBalances[$key];
            $symbol = $key;
            $used = $this->safe_string($originBalance, 'frozen');
            $total = $this->safe_string($originBalance, 'balance_total');
            $free = $this->safe_string($originBalance, 'available');
            $balances[$symbol] = array(
                'free' => $free,
                'used' => $used,
                'total' => $total,
                'debt' => 0, // ???
            );
        }
        return $this->safe_balance($balances);
    }

    public function parse_ohlcv(mixed $ohlcv, ?array $market): array {
        // $klines = array( array( 'timestamp' => 1720072680,
        //     'open' => '68000.00',
        //     'close' => '68000.00',
        //     'high' => '68000.00',
        //     'low' => '68000.00',
        //     'volume' => '0',
        //     'amount' => '0' ),
        // array( 'timestamp' => 1720072740,
        //     'open' => '68000.00',
        //     'close' => '68000.00',
        //     'high' => '68000.00',
        //     'low' => '68000.00',
        //     'volume' => '0',
        //     'amount' => '0' ),
        // );
        // future
        // open close high low
        // [1722670020,"66019","66019","66019","66019","0","0","BTCUSDT"]
        return array(
            $this->safe_timestamp_2($ohlcv, 'timestamp', 0),
            $this->safe_integer_2($ohlcv, 'open', 1),
            $this->safe_integer_2($ohlcv, 'high', 3),
            $this->safe_integer_2($ohlcv, 'low', 4),
            $this->safe_integer_2($ohlcv, 'close', 2),
            $this->safe_integer_2($ohlcv, 'volume', 5),
        );
    }

    public function parse_lower_timeframe(string $timeframeId) {
        $timeframes = array(
            '1min' => '1m',
            '3min' => '3m',
            '5min' => '5m',
            '15min' => '15m',
            '10min' => '10m',
            '30min' => '30m',
            '1hour' => '1h',
            '2hour' => '2h',
            '4hour' => '4h',
            '6hour' => '6h',
            '12hour' => '12h',
            '1day' => '1d',
            '1week' => '1w',
        );
        return $timeframes[$timeframeId];
    }

    public function parse_trade(array $trade, ?array $market): array {
        //         { 'amount' => '10200.00000015',
        //             'price' => '68000.000001',
        //             'side' => 1,
        //             'time' => 1719476275833,
        //             'volume' => '0.150000' }
        //         {
        //             'amount' => '7',
        //             'price' => '70000',
        //             'quantity' => '0.0001',
        //             'fee' => '0.0112',
        //             'time' => 1574922846833
        //             }
        // future
        // {
        //     "id" => 27699216,
        //     "price" => "1573.89",
        //     "amount" => "0.922",
        //     "type" => "buy",
        //     "time" => 1697619536.256684
        //   }
        $timestamp = $this->safe_timestamp_2($trade, 'time', 'timestamp');
        $symbol = $this->safe_string($market, 'symbol');
        $side = null;
        if ($market['spot']) {
            $sideNumber = $this->safe_integer($trade, 'side');
            $side = ($sideNumber === 1) ? 'sell' : 'buy';
        } else {
            $sideStr = $this->safe_string($trade, 'type');
            $side = ($sideStr === 'buy') ? 'sell' : 'buy';
        }
        $amount = $this->safe_string($trade, 'amount');
        $volume = $this->safe_string($trade, 'volume', null);
        return $this->safe_trade(array(
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'id' => null,
            'order' => null,
            'type' => null,
            'side' => $side,
            'takerOrMaker' => null,
            'price' => $this->safe_string($trade, 'price'),
            'amount' => $amount,
            'cost' => $volume,
            'fee' => null,
        ), $market);
    }

    public function parse_order_type(?string $type_) {
        // int order_type, 1 Limit，3 Market
        if ($type_ === 'LIMIT' || $type_ === '1') {
            return 'limit';
        } elseif ($type_ === 'MARKET' || $type_ === '2') {
            return 'market';
        } else {
            throw new ExchangeError('unknown orderType => ' . $this->number_to_string($type_));
        }
    }

    public function to_spot_order_type(string $type_) {
        // ccxt orderType to allin orderType
        if ($type_ === 'limit') {
            return 'LIMIT';
        } elseif ($type_ === 'market') {
            return 'MARKET';
        } else {
            throw new ExchangeError('unknown orderType => ' . $type_);
        }
    }

    public function to_future_order_type(string $type_) {
        // ccxt orderType to allin orderType
        if ($type_ === 'limit') {
            return 1;
        } elseif ($type_ === 'market') {
            return 2;
        } else {
            throw new ExchangeError('unknown orderType => ' . $type_);
        }
    }

    public function parse_order_side(?int $side) {
        if ($side === 2) {
            return 'buy';
        } else {
            return 'sell';
        }
    }

    public function to_order_side(string $side) {
        if ($side === 'buy') {
            return 2;
        } else {
            return 1;
        }
    }

    public function parse_spot_order_status(?int $status) {
        // Status 2 Outstanding，3 Partial filled，4 all filled，
        // 5 cancel after partial filled，
        $statusStr = $this->number_to_string($status);
        $statusDict = array(
            '1' => 'open',        // no
            '2' => 'open',        // 2 Outstanding
            '3' => 'open',        // 3 Partial filled
            '4' => 'closed',      // 4 all filled
            '5' => 'closed',    // 5 canceled after partial filled
            '6' => 'canceled',    // 6 all cancel
        );
        return $this->safe_string($statusDict, $statusStr);
    }

    public function parse_future_order_status(?int $status) {
        // OrderStatusPending         OrderStatus = 1
        // OrderStatusPartial         OrderStatus = 2
        // OrderStatusFilled          OrderStatus = 3
        // OrderStatusPartialCanceled OrderStatus = 4
        // OrderStatusCanceled        OrderStatus = 5
        $statusStr = $this->number_to_string($status);
        $statusDict = array(
            '1' => 'open',        // 1 Pending
            '2' => 'open',        // 2 Partial filled
            '3' => 'closed',      // 3 all filled
            '4' => 'closed',      // 4 canceled after partial filled
            '5' => 'canceled',    // 5 all cancel
        );
        return $this->safe_string($statusDict, $statusStr);
    }

    public function parse_order(array $order, ?array $market): array {
        // // fetchOrders //
        // $order = array(
        //     'order_id' => '11574744030837944',
        //     'trade_no' => '499016576021202015341', // removed
        //     'symbol' => 'BTC-USDT',
        //     'price' => '7900',
        //     'quantity' => '1',
        //     'match_amt' => '0',
        //     'match_qty' => '0',
        //     'match_price' => '',
        //     'side' => -1,
        //     'order_type' => 1,
        //     'status' => 6,
        //     'create_at' => 1721550307.615717,
        // );
        // // $order detail //
        //     'data' => {
        //         'order_id' => '11574751725833010',
        //         'trade_no' => '499073202290421221116', // removed
        //         'symbol' => 'BTC-USDT',
        //         'price' => '70000',
        //         'quantity' => '0.0001',
        //         'match_amt' => '7',
        //         'match_qty' => '0.0001',
        //         'match_price' => '70000',
        //         'fee' => '0.0112',
        //         'side' => -1,
        //         'order_type' => 1,
        //         'status' => 4,
        //         'create_at' => 1721550307.615717,
        //         'trades' => [array(
        //             'amount' => '7',
        //             'price' => '70000',
        //             'quantity' => '0.0001',
        //             'fee' => '0.0112',
        //             'time' => 1574922846833
        //             )]
        //     }
        // future
        // $futureOrder = array(
        //     'code' => 0,
        //     'msg' => 'success',
        //     'data' => array(
        //         'order_id' => 1470445037,
        //         'position_id' => 0,
        //         'market' => 'ETHUSDT',
        //         'type' => 2,
        //         'side' => 1,
        //         'left' => '0',
        //         'amount' => '1',
        //         'filled' => '1',
        //         'deal_fee' => '0.7869',
        //         'price' => '0',
        //         'avg_price' => '1573.84',
        //         'deal_stock' => '1573.84',
        //         'position_type' => 1,
        //         'leverage' => '20',
        //         'update_time' => 1697616547.90107,
        //         'create_time' => 1697616547.901067,
        //         'status' => 3,
        //         'stop_loss_price' => '-',
        //         'take_profit_price' => '-',
        //         'client_oid' => '36341ddd362363263626',
        //     ),
        // );
        $timestamp = $this->safe_timestamp_2($order, 'create_at', 'create_time');
        $updateAt = $timestamp;
        $symbol = $this->safe_string_2($market, 'symbol', 'market');
        $side = $this->parse_order_side($this->safe_integer($order, 'side'));
        $price = $this->safe_string($order, 'price');
        $amount = $this->safe_string_2($order, 'quantity', 'amount');
        $average = $this->safe_string_2($order, 'match_price', 'avg_price');
        $filled = $this->safe_string_2($order, 'match_qty', 'filled', '0');
        $cost = $this->safe_string_2($order, 'match_amt', 'deal_stock', '0');
        $feeCost = $this->safe_string_2($order, 'fee', 'deal_fee', null);
        $type_ = $this->parse_order_type($this->safe_string_2($order, 'order_type', 'type'));
        $fee = null;
        if ($feeCost !== null) {
            $fee = array(
                'currency' => null,
                'cost' => $feeCost,
                'rate' => null,
            );
        }
        $trades = $this->safe_list($order, 'trades', array());
        $status = null;
        if ($market['spot']) {
            $status = $this->parse_spot_order_status($this->safe_integer($order, 'status'));
        } else {
            $status = $this->parse_future_order_status($this->safe_integer($order, 'status'));
            $updateAt = $this->safe_timestamp($order, 'update_time', $timestamp);
        }
        return $this->safe_order(array(
            'info' => $order,
            'id' => $this->safe_string($order, 'order_id'),
            'clientOrderId' => null,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => $updateAt,
            'lastUpdateTimestamp' => $updateAt,
            'symbol' => $symbol,
            'type' => $type_,
            'timeInForce' => null,
            'postOnly' => null,
            'reduceOnly' => null,
            'side' => $side,
            'price' => $price,
            'triggerPrice' => null,
            'amount' => $amount,
            'cost' => $cost,
            'average' => $average,
            'filled' => $filled,
            'remaining' => null,
            'status' => $status,
            'fee' => $fee,
            'trades' => $trades,
        ), $market);
    }

    public function parse_position(array $position, ?array $market): Position {
        //       "position":{
        //         "position_id":4784242,
        //         "create_time":1699944061.968543,
        //         "update_time":1699944061.968656,
        //         "user_id":9108,
        //         "market":"BTCUSDT",
        //         "type":2,            // Position type，1 Isolated $position 2 Cross $position
        //         "side":2,            //1 short 2 long
        //         "amount":"0.0444",
        //         "close_left":"0.0444",       // left can close
        //         "open_price":"36341.6",
        // "last_price":"62748.25000000",
        // "sign_price":"56885.76824999",
        // "index_price":"56864.00000000",
        //         "open_margin":"6.4063",
        //         "margin_amount":"16.1356",
        //         "leverage":"100",
        //         "profit_unreal":"11.0184",
        //         "liq_price":"0",
        //         "mainten_margin":"0.005",
        //         "mainten_margin_amount":"8.0678",
        //         "adl_sort":1,
        //         "roe":"0.6828",
        //         "margin_ratio":"",
        //         "stop_loss_price":"-",
        //         "take_profit_price":"-"
        //       }
        $timestamp = $this->safe_timestamp($position, 'update_time');
        $initialMarginNum = $this->safe_number($position, 'open_margin');
        $maintenanceMarginString = $this->safe_string($position, 'mainten_margin_amount');
        $sideNum = $this->safe_integer($position, 'side');
        $modeNum = $this->safe_integer($position, 'type');
        $amount = $this->safe_string($position, 'amount');
        $lastPrice = $this->safe_string($position, 'last_price');
        $markPrice = $this->safe_string($position, 'sign_price');
        $size = $market['contractSize'];
        $notional = $this->parse_number(Precise::string_mul($amount, $lastPrice)) * $size;
        $profit_unreal = $this->safe_number($position, 'profit_unreal');
        $collateral = $initialMarginNum . $profit_unreal;
        return $this->safe_position(array(
            'info' => $position,
            'id' => $this->safe_integer($position, 'position_id'),
            'symbol' => $market['symbol'],
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastUpdateTimestamp' => $timestamp,
            'initialMargin' => $initialMarginNum,
            'initialMarginPercentage' => null,
            'maintenanceMargin' => $this->parse_number($maintenanceMarginString),
            'maintenanceMarginPercentage' => $this->safe_integer($position, 'mainten_margin'),
            'entryPrice' => $this->safe_float($position, 'open_price'),
            'notional' => $notional,
            'leverage' => $this->safe_number($position, 'leverage'),
            'unrealizedPnl' => $this->safe_float($position, 'profit_unreal'),
            'realizedPnl' => null,
            'contracts' => $this->parse_number($amount), // in USD for inverse swaps
            'contractSize' => $this->safe_number($market, 'contractSize'),
            'marginRatio' => $this->safe_number($position, 'margin_ratio'),
            'liquidationPrice' => $this->safe_number($position, 'liq_price'),
            'markPrice' => $this->parse_number($markPrice),
            'lastPrice' => $this->parse_number($lastPrice),
            'collateral' => $collateral,
            'marginMode' => $this->parse_leverage_mode($modeNum),
            'side' => $this->parse_position_side($sideNum),
            'percentage' => $this->safe_float($position, 'roe'),
            'stopLossPrice' => $this->safe_number($position, 'stop_loss_price'),
            'takeProfitPrice' => $this->safe_number($position, 'take_profit_price'),
        ));
    }

    public function parse_position_side(?int $sideNum) {
        if ($sideNum === 1) {
            return 'short';
        } else {
            return 'long';
        }
    }

    public function to_leverage_mode(string $marginMode) {
        if ($marginMode === 'isolated') {
            return 1;
        } else {
            return 2;
        }
    }

    public function parse_leverage_mode(?int $modeNum) {
        if ($modeNum === 1) {
            return 'isolated';
        } else {
            return 'cross';
        }
    }

    public function parse_leverage($leverage, $market): array {
        // {
        //     "code" => 0,
        //     "msg" => "success",
        //     "data" => {
        //       "leverage" => "100",
        //       "position_type" => 1
        //     }
        //   }
        $data = $this->safe_dict($leverage, 'data');
        $leverageNum = $this->safe_integer($data, 'leverage');
        $modeNum = $this->safe_integer($data, 'position_type');
        return array(
            'info' => $leverage,
            'symbol' => $market['symbol'],
            'marginMode' => $this->parse_leverage_mode($modeNum),
            'longLeverage' => $leverageNum,
            'shortLeverage' => $leverageNum,
        );
    }

    public function handle_errors(?int $statusCode, string $statusText, string $url, string $method, array $responseHeaders, string $responseBody, mixed $response, mixed $requestHeaders, mixed $requestBody) {
        if ($statusCode >= 400) {
            throw new NetworkError($this->id . ' ' . $statusText);
        }
        // $response = array( 'code' => 0,
        //     'msg' => 'ok',
        //     'data' => array(
        //         array( 'amount' => '1000.1', 'freeze' => '0', 'symbol' => 'BTC' ),
        //         array( 'amount' => '0', 'freeze' => '0', 'symbol' => 'ETH' ),
        //         array( 'amount' => '0', 'freeze' => '0', 'symbol' => 'TRX' ),
        //         array( 'amount' => '99988000', 'freeze' => '6000', 'symbol' => 'USDT' ) ),
        //     'time' => 1720067861 );
        // feture
        // array('code' => '10013', 'msg' => 'order is not exist', 'data' => None, 'time' => '1723189930')
        if ($response === null) {
            return null; // fallback to default error handler
        }
        $responseCode => int = $this->safe_integer($response, 'code', 0);
        if ($responseCode !== 0) {
            $codeStr = $this->number_to_string($responseCode);
            $messageNew = $this->safe_string($response, 'msg');
            $msg = $this->id . ', code => ' . $codeStr . ', ' . $messageNew;
            $this->log($response);
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $codeStr, $msg);
            // Make sure to throw an exception.
            // throw new ExchangeError($msg);
        }
    }
}
