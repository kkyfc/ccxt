# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.base.exchange import Exchange
from ccxt.abstract.allin import ImplicitAPI
import hashlib
from ccxt.base.types import Any, Balances, Int, Market, MarketInterface, Order, OrderBook, OrderSide, OrderType, Ticker, Trade, Num, Str
from typing import List
from ccxt.base.errors import ExchangeError
from ccxt.base.errors import AuthenticationError
from ccxt.base.errors import ArgumentsRequired
from ccxt.base.errors import BadRequest
from ccxt.base.errors import BadSymbol
from ccxt.base.errors import OrderNotFound
from ccxt.base.errors import OperationFailed
from ccxt.base.errors import NetworkError
from ccxt.base.errors import RateLimitExceeded
from ccxt.base.precise import Precise


class allin(Exchange, ImplicitAPI):

    def describe(self):
        return self.deep_extend(super(allin, self).describe(), {
            'id': 'allin',
            'name': 'allin',
            'countries': ['US'],
            'version': 'v1',
            'userAgent': None,
            'rateLimit': 200,
            'hostname': 'allin.pro',
            'pro': True,
            'certified': False,
            'options': {
                'sandboxMode': False,
            },
            'has': {
                'CORS': True,
                'spot': True,
                'margin': True,
                'swap': True,
                'future': True,
                'option': True,
                'borrowCrossMargin': True,
                'cancelAllOrders': True,
                'cancelAllOrdersAfter': True,
                'cancelOrder': True,
                'cancelOrders': True,
                'cancelOrdersForSymbols': True,
                'closeAllPositions': False,
                'closePosition': False,
                'createMarketBuyOrderWithCost': True,
                'createMarketSellOrderWithCost': True,
                'createOrder': True,
                'createOrders': True,
                'createOrderWithTakeProfitAndStopLoss': False,
                'createPostOnlyOrder': False,
                'createReduceOnlyOrder': False,
                'createStopLimitOrder': False,
                'createStopLossOrder': False,
                'createStopMarketOrder': False,
                'createStopOrder': False,
                'createTakeProfitOrder': True,
                'createTrailingAmountOrder': True,
                'createTriggerOrder': False,
                'editOrder': True,
                'fetchBalance': True,
                'fetchBorrowInterest': False,  # temporarily disabled, doesn't work
                'fetchBorrowRateHistories': False,
                'fetchBorrowRateHistory': False,
                'fetchCanceledAndClosedOrders': True,
                'fetchCanceledOrders': True,
                'fetchClosedOrder': True,
                'fetchClosedOrders': True,
                'fetchCrossBorrowRate': True,
                'fetchCrossBorrowRates': False,
                'fetchCurrencies': False,
                'fetchDeposit': False,
                'fetchDepositAddress': True,
                'fetchDepositAddresses': False,
                'fetchDepositAddressesByNetwork': True,
                'fetchDeposits': True,
                'fetchDepositWithdrawFee': 'emulated',
                'fetchDepositWithdrawFees': True,
                'fetchFundingHistory': True,
                'fetchFundingRate': True,  # emulated in exchange
                'fetchFundingRateHistory': True,
                'fetchFundingRates': True,
                'fetchGreeks': True,
                'fetchIndexOHLCV': True,
                'fetchIsolatedBorrowRate': False,
                'fetchIsolatedBorrowRates': False,
                'fetchLedger': True,
                'fetchLeverage': True,
                'fetchLeverageTiers': True,
                'fetchMarginAdjustmentHistory': False,
                'fetchMarketLeverageTiers': True,
                'fetchMarkets': True,
                'fetchMarkOHLCV': True,
                'fetchMyLiquidations': True,
                'fetchMySettlementHistory': True,
                'fetchMyTrades': True,
                'fetchOHLCV': True,
                'fetchOpenInterest': True,
                'fetchOpenInterestHistory': True,
                'fetchOpenOrder': True,
                'fetchOpenOrders': True,
                'fetchOption': True,
                'fetchOptionChain': True,
                'fetchOrder': True,
                'fetchOrderBook': True,
                'fetchOrders': True,
                'fetchOrderTrades': False,
                'fetchPosition': True,
                'fetchPositionHistory': 'emulated',
                'fetchPositions': True,
                'fetchPositionsHistory': True,
                'fetchPremiumIndexOHLCV': True,
                'fetchSettlementHistory': True,
                'fetchTicker': True,
                'fetchTickers': True,
                'fetchTime': True,
                'fetchTrades': True,
                'fetchTradingFee': True,
                'fetchTradingFees': True,
                'fetchTransactions': False,
                'fetchTransfers': True,
                'fetchUnderlyingAssets': False,
                'fetchVolatilityHistory': True,
                'fetchWithdrawals': True,
                'repayCrossMargin': True,
                'sandbox': True,
                'setLeverage': True,
                'setMarginMode': True,
                'setPositionMode': True,
                'transfer': True,
                'withdraw': True,
            },
            'timeframes': {
                '1m': '1Min',
                '3m': '3Min',
                '5m': '5Min',
                '15m': '15Min',
                '10m': '10Min',
                '30m': '30Min',
                '1h': '1Hour',
                '2h': '2Hour',
                '4h': '4Hour',
                '6h': '6Hour',
                '12h': '12Hour',
                '1d': '1Day',
                '1w': '1Week',
            },
            'urls': {
                'test': {
                    'spot': 'https://api.allintest.pro',
                    'futures': 'https://api.allintest.pro',
                    'public': 'https://api.allintest.pro',
                    'private': 'https://api.allintest.pro',
                },
                'logo': 'https://allinexchange.github.io/spot-docs/v1/en/images/logo-e47cee02.svg',
                'doc': ['https://allinexchange.github.io/spot-docs/v1/en/#introduction'],
                'api': {
                    'spot': 'https://api.allintest.pro',
                    'futures': 'https://api.allintest.pro',
                    'public': 'https://api.allintest.pro',
                    'private': 'https://api.allintest.pro',
                },
            },
            'api': {
                'public': {
                    'get': {
                        '/open/v1/tickers/market': 0,
                        '/open/v1/depth/market': 0,
                        '/open/v1/trade/market': 0,
                        '/open/v1/kline/market': 0,
                    },
                },
                'private': {
                    'get': {
                        '/open/v1/tickers/exchange_info': 0,
                        '/open/v1/tickers': 0,
                        '/open/v1/balance': 0,
                        '/open/v1/timestamp': 0,
                        '/open/v1/kline': 0,
                        '/open/v1/depth': 0,
                        '/open/v1/tickers/trade': 0,
                        '/open/v1/orders/last': 0,
                        '/open/v1/orders': 0,
                        '/open/v1/orders/detail': 0,
                        '/open/v1/orders/detailmore': 0,
                        '/open/v1/orders/fee-rate': 0,
                    },
                    'post': {
                        '/open/v1/orders/place': 0,
                        '/open/v1/orders/cancel': 0,
                        '/open/v1/orders/batcancel': 0,
                    },
                },
            },
            'exceptions': {
                'spot': {
                    'exact': {
                        '1010004': BadRequest,
                        '80005': BadRequest,
                    },
                },
                'exact': {
                    '1010037': OrderNotFound,  # order not found
                    '1010312': BadRequest,
                    '1010313': AuthenticationError,
                    '1010314': RateLimitExceeded,   # Request cannot be more than %s/m
                    '1010315': RateLimitExceeded,   # no authority, ip is not allowed
                    '1010316': AuthenticationError,  # no authority, sign is error
                    '1010007': RateLimitExceeded,   # call too frequently
                    '1010325': BadSymbol,           # symbol is empty
                    '10500': ExchangeError,         # system error
                    '1010367': OperationFailed,     # self ticker cannot be operated
                    '1010006': AuthenticationError,  # invalid user_id
                    '1010009': BadRequest,          # side is error
                    '1010010': BadRequest,          # time is error
                    '1010008': BadRequest,          # status is error
                    '80005': BadRequest,            # param error
                    '1010013': BadRequest,          # ticker is paused
                    '1010018': BadRequest,          # cannot place market price order
                    '1010016': BadRequest,          # price is too small
                    '1010401': BadRequest,          # price is too high
                    '1010019': BadRequest,          # market price empty
                    '1010020': BadRequest,          # order_type must 1 or 3
                    '1010022': BadRequest,          # Below the minimum purchase price
                    '1010017': BadRequest,          # Order amount cannot be less than %s
                    '1010023': BadRequest,          # Below the minimum sell price
                    '1010318': BadRequest,          # client_oid must be 21 in length, and must be numbers
                    '1010030': OrderNotFound,       # order_id not exists
                    '1010002': BadRequest,          # ticker_id is empty
                    '1010004': BadRequest,          # kline type is error
                    '1010406': BadRequest,          # Depth position error
                    '1010005': BadRequest,          # data is empty
                    '1010364': BadRequest,          # symbol count cannot be more than 10
                },
            },
        })

    def fetch_markets(self, params={}) -> List[Market]:
        """
        retrieves data on all markets for allin
        :see: https://allinexchange.github.io/spot-docs/v1/en/#all-trading-pairs-2
        """
        # markets_resp = {'code': 0,
        #     'msg': 'ok',
        #     'data': {'server_time': 1720058066,
        #         'symbols': [
        #             {'symbol': 'BTC-USDT',
        #                 'status': 'TRADING',
        #                 'base_asset': 'USDT',
        #                 'base_precision': 2,
        #                 'base_asset_precision': 8,
        #                 'quote_asset': 'BTC',
        #                 'quote_precision': 6,
        #                 'quote_asset_precision': 8,
        #                 'order_types': ['LIMIT', 'MARKET'],
        #                 'order_side': {'buy': 1, 'sell': -1},
        #                 'is_spot_trading_allowed': True,
        #                 'min_order_amount': '2'},
        #             {'symbol': 'ETH-USDT',
        #                 'status': 'TRADING',
        #                 'base_asset': 'USDT',
        #                 'base_precision': 6,
        #                 'base_asset_precision': 8,
        #                 'quote_asset': 'ETH',
        #                 'quote_precision': 6,
        #                 'quote_asset_precision': 8,
        #                 'order_types': ['LIMIT', 'MARKET'],
        #                 'order_side': {'buy': 1, 'sell': -1},
        #                 'is_spot_trading_allowed': True,
        #                 'min_order_amount': '2'}],
        #         'timezone': 'UTC'},
        #     'time': 1720058066}
        promisesRaw = []
        # sandboxMode = self.safe_bool(self.options, 'sandboxMode', False)
        rawFetchMarkets = self.safe_list(self.options, 'fetchMarkets', ['spot', 'linear', 'inverse'])
        for i in range(0, len(rawFetchMarkets)):
            marketType = rawFetchMarkets[i]
            if marketType == 'spot':
                promisesRaw.append(self.privateGetOpenV1TickersExchangeInfo(params))
        promises = promisesRaw
        markets = []
        for i in range(0, len(rawFetchMarkets)):
            promise = self.safe_dict(promises, i)
            dataDict = self.safe_dict(promise, 'data', {})
            promiseMarkets = self.safe_list(dataDict, 'symbols', [])
            markets = self.array_concat(markets, promiseMarkets)
        return self.parse_markets(markets)

    def parse_market(self, market: dict) -> MarketInterface:
        # market = {'symbol': 'BTC-USDT',
        #     'status': 'TRADING',
        #     'base_asset': 'USDT',
        #     'base_precision': 2,
        #     'quote_asset': 'BTC',
        #     'quote_precision': 6,
        #     'order_types': ['LIMIT', 'MARKET'],
        #     'order_side': {'buy': 1, 'sell': -1},
        #     'is_spot_trading_allowed': True,
        #     'min_order_amount': '2'}
        origin_symbol = self.safe_string(market, 'symbol')
        active = market['status'] == 'TRADING'
        baseId = self.safe_string(market, 'base_asset')
        quoteId = self.safe_string(market, 'quote_asset')
        spot = market['is_spot_trading_allowed'] is True
        swap = False
        future = False
        option = False
        type_ = 'spot'
        contract = swap or future or option
        # if (origin_symbol is not None) and not spot:
        if origin_symbol is not None:
            parts = origin_symbol.split('-')
            baseId = self.safe_string(parts, 0)
            quoteId = self.safe_string(parts, 1)
        base = self.safe_currency_code(baseId)
        quote = self.safe_currency_code(quoteId)
        settleId = self.safe_string(market, 'settleCcy')
        settle = self.safe_currency_code(settleId)
        base_precision = self.safe_integer(market, 'base_precision')
        quote_precision = self.safe_integer(market, 'quote_precision')
        fees = self.safe_dict_2(self.fees, type_, 'trading', {})
        maxLeverage = self.safe_string(market, 'lever', '1')
        maxLeverage = Precise.string_max(maxLeverage, '1')
        maxSpotCost = self.safe_number(market, 'maxMktSz')
        symbol = base + '/' + quote
        expiry = None
        strikePrice = None
        optionType = None
        if contract:
            symbol = symbol + ':' + settle
            # ???
            expiry = self.safe_integer(market, 'expTime')
            if future:
                ymd = self.yymmdd(expiry)
                symbol = symbol + '-' + ymd
            elif option:
                strikePrice = self.safe_string(market, 'stk')
                optionType = self.safe_string(market, 'optType')
                ymd = self.yymmdd(expiry)
                symbol = symbol + '-' + ymd + '-' + strikePrice + '-' + optionType
                optionType = 'put' if (optionType == 'P') else 'call'
        return self.extend(fees, {
            'id': origin_symbol,
            'symbol': symbol,
            'base': base,
            'quote': quote,
            'baseId': baseId,
            'quoteId': quoteId,
            'active': active,
            'type': type_,
            'spot': spot,
            'margin': False,
            'swap': False,
            'future': False,
            'option': False,
            'contract': contract,
            'settle': settle,
            'settleId': settleId,
            'contractSize': self.safe_number(market, '???') if contract else None,
            'linear': (quoteId == settleId) if contract else None,
            'inverse': (baseId == settleId) if contract else None,
            'expiry': expiry,
            'expiryDatetime': self.iso8601(expiry),
            'strike': strikePrice,
            'optionType': optionType,
            'maker': 0.0001,
            'taker': 0.0002,
            'created': None,
            'precision': {
                'amount': base_precision,
                'price': quote_precision,
            },
            'limits': {
                'leverage': {
                    'min': self.parse_number('1'),
                    'max': self.parse_number(maxLeverage),
                },
                'amount': {
                    'min': self.safe_number(market, 'min_order_amount'),
                    'max': None,
                },
                'price': {
                    'min': None,
                    'max': None,
                },
                'cost': {
                    'min': None,
                    'max': None if contract else maxSpotCost,
                },
            },
            'info': market,
        })

    def fetch_ticker(self, symbol: str, params={}) -> Ticker:
        # tickers = {'code': 0,
        #     'msg': 'ok',
        #     'data': [{'symbol': 'BTC-USDT',
        #         'amt_num': 2,
        #         'qty_num': 6,
        #         'amount': '0',
        #         'volume': '0',
        #         'high': '68000',
        #         'low': '68000',
        #         'change': '0',
        #         'price': '68000',
        #         'l_price': '68000'}],
        #     'time': 1720064580}
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
        }
        response = self.publicGetOpenV1TickersMarket(self.extend(request, params))
        timestamp = self.safe_timestamp(response, 'time')
        TickerList = self.safe_list(response, 'data', [])
        firstTicker = self.safe_value(TickerList, 0, {})
        firstTicker['timestamp'] = timestamp
        return self.parse_ticker(firstTicker, market)

    def fetch_order_book(self, symbol: str, limit: Int = 50, params={}) -> OrderBook:
        """
        fetches information on open orders with bid(buy) and ask(sell) prices, volumes and other data
        :see: https://allinexchange.github.io/spot-docs/v1/en/#depth
        :see: https://allinexchange.github.io/spot-docs/v1/en/#market-depth
        """
        # orderbook = {'code': 0,
        #     'msg': 'ok',
        #     'data': {'bids': [
        #         {'price': '63000.21', 'quantity': '0.008694'},
        #         {'price': '62500.00', 'quantity': '0.034351'},
        #         {'price': '62000.00', 'quantity': '1.999000'},
        #         {'price': '40000.00', 'quantity': '0.022334'}],
        #     'asks': [{'price': '72875.36', 'quantity': '0.036895'},
        #         {'price': '72951.29', 'quantity': '0.040065'},
        #         {'price': '73104.20', 'quantity': '0.040996'},
        #         {'price': '78000.00', 'quantity': '0.003000'}]},
        #     'time': 1721550050}
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchOrderBook() requires a symbol argument')
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
        }
        response = self.publicGetOpenV1DepthMarket(self.extend(request, params))
        result = self.safe_dict(response, 'data', {})
        timestamp = self.safe_timestamp(response, 'time')
        return self.parse_order_book(result, symbol, timestamp, 'bids', 'asks', 'price', 'quantity')

    def fetch_balance(self, params={}) -> Balances:
        """
        query for balance and get the amount of funds available for trading or funds locked in orders
        :see: https://allinexchange.github.io/spot-docs/v1/en/#account-balance
        """
        # balances = {'code': 0,
        #     'msg': 'ok',
        #     'data': [
        #         {'amount': '1000.1', 'freeze': '0', 'symbol': 'BTC'},
        #         {'amount': '0', 'freeze': '0', 'symbol': 'ETH'},
        #         {'amount': '0', 'freeze': '0', 'symbol': 'TRX'},
        #         {'amount': '99988000', 'freeze': '6000', 'symbol': 'USDT'}],
        #     'time': 1720067861}
        self.load_markets()
        response = self.privateGetOpenV1Balance(params)
        return self.parse_balance(response)

    def fetch_ohlcv(self, symbol: str, timeframe: str = '1m', since: Int = None, limit: Int = None, params={}) -> List[list]:
        """
        fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        :see: https://allinexchange.github.io/spot-docs/v1/en/#market-k-line-2
        :see: https://allinexchange.github.io/spot-docs/v1/en/#market-k-line
        :param str symbol: unified symbol of the market to fetch OHLCV data for
        :param str timeframe: the length of time each candle represents
        :param int [since]: not support
        :param int [limit]: not support
        """
        # kline = {'code': 0,
        #     'msg': 'ok',
        #     'data':
        #      [{'time': 1720072680, 'open': '68000.00', 'close': '68000.00', 'high': '68000.00', 'low': '68000.00', 'volume': '0', 'amount': '0'},
        #          {'time': 1720072740, 'open': '68000.00', 'close': '68000.00', 'high': '68000.00', 'low': '68000.00', 'volume': '0', 'amount': '0'},
        # ],
        #     'time': 1720081645}
        self.load_markets()
        market = self.market(symbol)
        marketId = self.market_id(symbol)
        duration = self.timeframes[timeframe]
        params = self.extend(params, {
            'symbol': marketId,
            'type': duration,
        })
        response = self.publicGetOpenV1KlineMarket(params)
        klines = self.safe_list(response, 'data', [])
        return self.parse_ohlcvs(klines, market, timeframe, since, limit)

    def fetch_orders(self, symbol: Str, since: Int = None, limit: Int = None, params={}) -> List[Order]:
        """
        fetches information on multiple orders made by the user
        :see: https://allinexchange.github.io/spot-docs/v1/en/#order-history
        :param str symbol: unified market symbol of the market orders were made in
        :param int [since]: Starting time, time stamp
        :param int [limit]: not support
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.side]: Direction，1 buy，-1 sell，0 all
        :param str [params.end]: Closing time, time stamp
        """
        # orders = {
        #     'code': 0,
        #     'msg': 'ok',
        #     'data': {
        #         'count': 4,
        #         'orders': [
        #             {
        #                 'order_id': '11574744030837944',
        #                 'trade_no': '499016576021202015341',
        #                 'symbol': 'BTC-USDT',
        #                 'price': '7900',
        #                 'quantity': '1',
        #                 'match_amt': '0',
        #                 'match_qty': '0',
        #                 'match_price': '',
        #                 'side': -1,
        #                 'order_type': 1,
        #                 'status': 6,
        #                 'create_at': 1574744151836,
        #             },
        #         ],
        #     },
        #     'time': 1720243714,
        # }
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchOrders() requires a symbol argument')
        self.load_markets()
        market = self.market(symbol)
        request: dict = self.extend(params, {
            'symbol': market['id'],
            'side': 0,
        })
        paginate = False
        paginate, params = self.handle_option_and_params(params, 'fetchOrders', 'paginate')
        if paginate:
            return self.fetch_paginated_call_dynamic('fetchOrders', symbol, since, limit, params)
        if since is not None:
            request['start'] = since
        response = self.privateGetOpenV1Orders(request)
        orders = self.safe_list(self.safe_dict(response, 'data', {}), 'orders')
        return self.parse_orders(orders, market, since, limit, params)

    def fetch_open_orders(self, symbol: Str, since: Int = None, limit: Int = None, params={}) -> List[Order]:
        """
        fetch all unfilled currently open orders
        :see: https://allinexchange.github.io/spot-docs/v1/en/#active-orders
        :param str symbol: unified market symbol of the market orders were made in
        :param int [since]: not support
        :param int [limit]: not support
        """
        # {
        #     'code': 0,
        #     'data': [
        #         {
        #             'symbol': 'BTC-USDT',
        #             'order_id': '11574744030837944',
        #             'trade_no': '499016576021202015341',
        #             'price': '7900',
        #             'quantity': '1',
        #             'match_amt': '0',
        #             'match_qty': '0',
        #             'match_price': '',
        #             'side': -1,
        #             'order_type': 1,
        #             'create_at': 1574744151836
        #         },
        #     ],
        # }
        self.load_markets()
        market = self.market(symbol)
        request: dict = self.extend(params, {
            'symbol': market['id'],
        })
        response = self.privateGetOpenV1OrdersLast(request)
        orders = self.safe_list(response, 'data')
        return self.parse_orders(orders, market)

    def fetch_order(self, id: str, symbol: Str, params={}) -> Order:
        """
        fetches information on an order made by the user
        :see: https://allinexchange.github.io/spot-docs/v1/en/#get-order-details
        :param str id: the order id
        :param str symbol: unified symbol of the market the order was made in
        """
        # {
        #     'code': 0,
        #     'data': {
        #         'order_id': '11574751725833010',
        #         'trade_no': '499073202290421221116',
        #         'symbol': 'BTC-USDT',
        #         'price': '70000',
        #         'quantity': '0.0001',
        #         'match_amt': '7',
        #         'match_qty': '0.0001',
        #         'match_price': '70000',
        #         'fee': '0.0112',
        #         'side': -1,
        #         'order_type': 1,
        #         'status': 4,
        #         'create_at': 1574922846832,
        #         'trades': [{
        #             'amount': '7',
        #             'price': '70000',
        #             'quantity': '0.0001',
        #             'fee': '0.0112',
        #             'time': 1574922846833
        #             }]
        #     }
        # }
        if id is None:
            raise ArgumentsRequired(self.id + ' fetchOrder() requires a orderId argument')
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchOrder() requires a symbol argument')
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'order_id': id,
            'symbol': market['id'],
        }
        response = self.privateGetOpenV1OrdersDetail(request)
        order = self.safe_dict(response, 'data')
        return self.parse_order(order, market)

    def fetch_trades(self, symbol: str, since: Int = None, limit: Int = None, params={}) -> List[Trade]:
        """
        Each filled orders
        :see: https://allinexchange.github.io/spot-docs/v1/en/#each-filled-orders-2
        :param str symbol: unified symbol of the market to fetch trades for
        :param int [since]: not support
        :param int [limit]: not support
        :param dict [params]: extra parameters specific to the exchange API endpoint
        """
        # trades = {'code': 0,
        #     'msg': 'ok',
        #     'data': [
        #         {'amount': '10200.00000015',
        #             'price': '68000.000001',
        #             'side': 1,
        #             'time': 1719476275833,
        #             'volume': '0.150000'},
        #         {'amount': '10200.00000015',
        #             'price': '68000.000001',
        #             'side': -1,
        #             'time': 1719476383705,
        #             'volume': '0.150000'}],
        #     'time': 1720167549}
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
        }
        response = self.publicGetOpenV1TradeMarket(request)
        trades = self.safe_list(response, 'data')
        return self.parse_trades(trades, market, since, limit)

    def create_order(self, symbol: str, type: OrderType, side: OrderSide, amount: float, price: Num, params={}) -> Order:
        """
        create a trade order
        :see: https://allinexchange.github.io/spot-docs/v1/en/#place-new-order
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much of you want to trade in units of the base currency
        :param float [price]: the price that the order is to be fullfilled, in units of the quote currency, ignored in market orders
        :param dict [params]: extra parameters specific to the exchange API endpoint
        """
        # {
        #     "code": 0,
        #     "msg": "ok",
        #     "data": {
        #         "order_id": "xxx",
        #         "trade_no": "xxx",
        #     },
        # }
        self.load_markets()
        market = self.market(symbol)
        symbolId = self.safe_string(market, 'id')
        request: dict = self.create_order_request(
            symbol,
            type,
            side,
            amount,
            price,
            params,
            market
        )
        response = self.privatePostOpenV1OrdersPlace(request)
        orderData = self.safe_dict(response, 'data')
        timestamp = self.safe_integer(response, 'time')  # timestamp in s
        return self.parse_order({
            'order_id': self.safe_string(orderData, 'order_id'),
            'trade_no': self.safe_string(orderData, 'trade_no'),
            'symbol': symbolId,
            'price': price,
            'quantity': amount,
            'match_amt': '0',
            'match_qty': '0',
            'match_price': '',
            'side': request['side'],
            'order_type': request['order_type'],
            'status': 'open',
            'create_at': timestamp,
        }, market)

    def cancel_order(self, id: str, symbol: Str, params={}) -> {}:
        """
        cancels an open order
        :see: https://allinexchange.github.io/spot-docs/v1/en/#cancel-an-order-in-order
        :param str id: order id
        :param str symbol: unified symbol of the market the order was made in
        :param dict [params]: extra parameters specific to the exchange API endpoint
        """
        # response = {'code': 0,
        #     'msg': 'ok',
        #     'data': {'create_at': 1720775927804,
        #         'left': '0.100000',
        #         'match_amt': '0',
        #         'match_price': '0',
        #         'match_qty': '0',
        #         'order_id': '40',
        #         'order_type': 1,
        #         'price': '60000.00',
        #         'quantity': '0.100000',
        #         'side': 1,
        #         'status': 6,
        #         'symbol': 'BTC-USDT',
        #         'ticker': 'BTC-USDT',
        #         'trade_no': '40545292203741231233614'},
        #     'time': 1720775985}
        if symbol is None:
            raise ArgumentsRequired(self.id + ' cancelOrder() requires a symbol argument')
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
            'order_id': id,
        }
        response = self.privatePostOpenV1OrdersCancel(request)
        orderData = self.safe_dict(response, 'data')
        return self.parse_order(orderData, market)

    def create_order_request(self, symbol: str, type: OrderType, side: OrderSide, amount: float, price: Num, params: {}, market: Market) -> dict:
        orderType = self.to_order_type(type)
        orderSide = self.to_order_side(side)
        request = {
            'symbol': market['id'],
            'side': self.force_string(orderSide),
            'order_type': orderType,
            'quantity': self.force_string(amount),
        }
        if price is not None and orderType == 'LIMIT':
            request['price'] = self.force_string(price)
        requestParams = self.omit(params, [
            'postOnly', 'stopLossPrice', 'takeProfitPrice', 'stopPrice',
            'triggerPrice', 'trailingTriggerPrice',
            'trailingPercent', 'quoteOrderQty'])
        return self.extend(request, requestParams)

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        url = self.implode_hostname(self.urls['api'][api]) + path
        nonce = str(self.nonce())
        ts = nonce
        client_id = self.apiKey
        requestParams = self.extend({}, params)
        if api == 'private':
            self.check_required_credentials()
            requestParams = self.extend(requestParams, {'ts': ts, 'nonce': nonce, 'sign': '', 'client_id': self.apiKey})
            s = 'client_id=' + client_id + '&nonce=' + nonce + '&ts=' + ts
            v = self.hmac(self.encode(s), self.encode(self.secret), hashlib.sha256)
            requestParams['sign'] = v
        if method == 'GET':
            if requestParams:
                url += '?' + self.rawencode(requestParams)
        elif method == 'POST':
            if not body:
                body = {}
            body = self.extend(body, requestParams)
            headersPost = {
                'Content-Type': 'application/x-www-form-urlencoded',
            }
            if not headers:
                headers = headersPost
            else:
                headers = self.extend(headers, headersPost)
        if body:
            body = self.urlencode(body)
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def parse_ticker(self, ticker: dict, market: Market = None) -> Ticker:
        # ticker = {'symbol': 'BTC-USDT',
        #     'amt_num': 2,
        #     'qty_num': 6,
        #     'amount': '0',
        #     'volume': '0',
        #     'high': '68000',
        #     'low': '68000',
        #     'change': '0',
        #     'price': '68000',
        #     'l_price': '68000'}
        marketId = self.safe_string(ticker, 'symbol')
        symbol = self.safe_symbol(marketId, market, None)
        last = self.safe_string(ticker, 'price')
        baseVolume = self.safe_string(ticker, 'volume')  # 数量
        quoteVolume = self.safe_string(ticker, 'amount')  # 金额
        timestamp = self.safe_integer(ticker, 'timestamp')
        return self.safe_ticker({
            'symbol': symbol,
            'info': ticker,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'open': None,
            'high': self.safe_string(ticker, 'high'),
            'low': self.safe_string(ticker, 'low'),
            'close': last,
            'bid': None,
            'bidVolume': None,
            'ask': None,
            'askVolume': None,
            'vwap': None,
            'last': last,
            'change': self.safe_string(ticker, 'change'),
            'average': None,
            'quoteVolume': quoteVolume,
            'baseVolume': baseVolume,
        }, market)

    def parse_balance(self, response: Any) -> Balances:
        # balances = {'code': 0,
        #     'msg': 'ok',
        #     'data': [
        #         {'amount': '1000.1', 'freeze': '0', 'symbol': 'BTC'},
        #         {'amount': '0', 'freeze': '0', 'symbol': 'ETH'},
        #         {'amount': '0', 'freeze': '0', 'symbol': 'TRX'},
        #         {'amount': '99988000', 'freeze': '6000', 'symbol': 'USDT'}],
        #     'time': 1720067861}
        originBalances = self.safe_list(response, 'data', [])
        timestamp = self.safe_timestamp(response, 'timestamp')
        balances = {
            'info': originBalances,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
        }
        for i in range(0, len(originBalances)):
            originBalance = originBalances[i]
            symbol = self.safe_string(originBalance, 'symbol')
            used = self.safe_string(originBalance, 'freeze')
            total = self.safe_string(originBalance, 'amount')
            free = Precise.string_sub(total, used)
            balances[symbol] = {
                'free': free,
                'used': used,
                'total': total,
                'debt': 0,  # ???
            }
        return self.safe_balance(balances)

    def parse_ohlcv(self, ohlcv: Any, market: Market) -> list:
        # klines = [{'time': 1720072680,
        #     'open': '68000.00',
        #     'close': '68000.00',
        #     'high': '68000.00',
        #     'low': '68000.00',
        #     'volume': '0',
        #     'amount': '0'},
        # {'time': 1720072740,
        #     'open': '68000.00',
        #     'close': '68000.00',
        #     'high': '68000.00',
        #     'low': '68000.00',
        #     'volume': '0',
        #     'amount': '0'},
        # ]
        return [
            self.safe_timestamp(ohlcv, 'time'),
            self.safe_integer(ohlcv, 'open'),
            self.safe_integer(ohlcv, 'high'),
            self.safe_integer(ohlcv, 'low'),
            self.safe_integer(ohlcv, 'close'),
            self.safe_integer(ohlcv, 'volume'),
        ]

    def parse_trade(self, trade: dict, market: Market) -> Trade:
        #         {'amount': '10200.00000015',
        #             'price': '68000.000001',
        #             'side': 1,
        #             'time': 1719476275833,
        #             'volume': '0.150000'}
        #         {
        #             'amount': '7',
        #             'price': '70000',
        #             'quantity': '0.0001',
        #             'fee': '0.0112',
        #             'time': 1574922846833
        #             }
        timestamp = self.safe_timestamp(trade, 'time')
        symbol = self.safe_string(market, 'symbol')
        sideNumber = self.safe_integer(trade, 'side')
        side = 'buy' if (sideNumber == 1) else 'sell'
        amount = self.safe_string(trade, 'amount')
        volume = self.safe_string(trade, 'volume')
        return self.safe_trade({
            'info': trade,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'symbol': symbol,
            'id': None,
            'order': None,
            'type': None,
            'side': side,
            'takerOrMaker': None,
            'price': self.safe_string(trade, 'price'),
            'amount': amount,
            'cost': volume,
            'fee': None,
        }, market)

    def parse_order_type(self, type_: Str):
        # int order_type, 1 Limit，3 Market
        if type_ == 'LIMIT' or type_ == '1':
            return 'limit'
        elif type_ == 'MARKET' or type_ == '3':
            return 'market'
        else:
            raise ExchangeError('unknown orderType: ' + self.number_to_string(type_))

    def to_order_type(self, type_: str):
        # ccxt orderType to allin orderType
        if type_ == 'limit':
            return 'LIMIT'
        elif type_ == 'market':
            return 'MARKET'
        else:
            raise ExchangeError('unknown orderType: ' + type_)

    def parse_order_side(self, side: Int):
        if side == 1:
            return 'buy'
        else:
            return 'sell'

    def to_order_side(self, side: str):
        if side == 'buy':
            return 1
        else:
            return -1

    def parse_order_status(self, status: Int):
        # Status 2 Outstanding，3 Partial filled，4 all filled，
        # 5 cancel after partial filled，
        statusStr = self.number_to_string(status)
        statusDict = {
            '1': 'open',        # no
            '2': 'open',        # 2 Outstanding
            '3': 'open',        # 3 Partial filled
            '4': 'closed',      # 4 all filled
            '5': 'canceled',    # 5 canceled after partial filled
            '6': 'canceled',    # 6 all cancel
        }
        return self.safe_string(statusDict, statusStr)

    def parse_order(self, order: dict, market: Market) -> Order:
        #  # fetchOrders  #
        # order = {
        #     'order_id': '11574744030837944',
        #     'trade_no': '499016576021202015341',  # removed
        #     'symbol': 'BTC-USDT',
        #     'price': '7900',
        #     'quantity': '1',
        #     'match_amt': '0',
        #     'match_qty': '0',
        #     'match_price': '',
        #     'side': -1,
        #     'order_type': 1,
        #     'status': 6,
        #     'create_at': 1721550307.615717,
        # }
        #  # order detail  #
        #     'data': {
        #         'order_id': '11574751725833010',
        #         'trade_no': '499073202290421221116',  # removed
        #         'symbol': 'BTC-USDT',
        #         'price': '70000',
        #         'quantity': '0.0001',
        #         'match_amt': '7',
        #         'match_qty': '0.0001',
        #         'match_price': '70000',
        #         'fee': '0.0112',
        #         'side': -1,
        #         'order_type': 1,
        #         'status': 4,
        #         'create_at': 1721550307.615717,
        #         'trades': [{
        #             'amount': '7',
        #             'price': '70000',
        #             'quantity': '0.0001',
        #             'fee': '0.0112',
        #             'time': 1574922846833
        #             }]
        #     }
        timestamp = self.safe_timestamp(order, 'create_at')
        symbol = self.safe_string(market, 'symbol')
        type_ = self.parse_order_type(self.safe_string(order, 'order_type'))
        side = self.parse_order_side(self.safe_integer(order, 'side'))
        price = self.safe_string(order, 'price')
        amount = self.safe_string(order, 'quantity')
        status = self.parse_order_status(self.safe_integer(order, 'status'))
        average = self.safe_string(order, 'match_price')
        filled = self.safe_string(order, 'match_qty', '0')
        cost = self.safe_string(order, 'match_amt', '0')
        feeCost = self.safe_string(order, 'fee', None)
        fee = None
        if feeCost is not None:
            fee = {
                'currency': self.safe_string(order, 'quoteAsset'),
                'cost': feeCost,
                'rate': None,
            }
        trades = self.safe_list(order, 'trades', [])
        return self.safe_order({
            'info': order,
            'id': self.safe_string(order, 'order_id'),
            'clientOrderId': None,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'lastTradeTimestamp': None,
            'lastUpdateTimestamp': None,
            'symbol': symbol,
            'type': type_,
            'timeInForce': None,
            'postOnly': None,
            'reduceOnly': None,
            'side': side,
            'price': price,
            'triggerPrice': None,
            'amount': amount,
            'cost': cost,
            'average': average,
            'filled': filled,
            'remaining': None,
            'status': status,
            'fee': fee,
            'trades': trades,
        }, market)

    def handle_errors(self, statusCode: Int, statusText: str, url: str, method: str, responseHeaders: dict, responseBody: str, response: Any, requestHeaders: Any, requestBody: Any):
        if statusCode >= 400:
            raise NetworkError(self.id + ' ' + statusText)
        # response = {'code': 0,
        #     'msg': 'ok',
        #     'data': [
        #         {'amount': '1000.1', 'freeze': '0', 'symbol': 'BTC'},
        #         {'amount': '0', 'freeze': '0', 'symbol': 'ETH'},
        #         {'amount': '0', 'freeze': '0', 'symbol': 'TRX'},
        #         {'amount': '99988000', 'freeze': '6000', 'symbol': 'USDT'}],
        #     'time': 1720067861}
        if response is None:
            return None  # fallback to default error handler
        responseCode: int = self.safe_integer(response, 'code', 0)
        if responseCode != 0:
            codeStr = self.number_to_string(responseCode)
            messageNew = self.safe_string(response, 'msg')
            msg = self.id + ', code: ' + codeStr + ', ' + messageNew
            self.log(response)
            self.throw_exactly_matched_exception(self.exceptions['exact'], codeStr, msg)
